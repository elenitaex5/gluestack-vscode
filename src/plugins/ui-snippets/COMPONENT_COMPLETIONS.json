{
  "BadgeStoryBadge-outline-error-sm": {
    "completion": "BadgeStoryBadge-outline-error-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"error\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-error": {
    "completion": "BadgeStoryBadge-outline-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"error\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-error-lg": {
    "completion": "BadgeStoryBadge-outline-error-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"error\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-warning-sm": {
    "completion": "BadgeStoryBadge-outline-warning-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"warning\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-warning": {
    "completion": "BadgeStoryBadge-outline-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"warning\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-warning-lg": {
    "completion": "BadgeStoryBadge-outline-warning-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"warning\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-success-sm": {
    "completion": "BadgeStoryBadge-outline-success-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"success\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-success": {
    "completion": "BadgeStoryBadge-outline-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"success\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-success-lg": {
    "completion": "BadgeStoryBadge-outline-success-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"success\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-info-sm": {
    "completion": "BadgeStoryBadge-outline-info-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"info\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-info": {
    "completion": "BadgeStoryBadge-outline-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"info\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-info-lg": {
    "completion": "BadgeStoryBadge-outline-info-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"info\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-sm": {
    "completion": "BadgeStoryBadge-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"muted\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline": {
    "completion": "BadgeStoryBadge-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"muted\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-outline-lg": {
    "completion": "BadgeStoryBadge-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"outline\" action=\"muted\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-error-sm": {
    "completion": "BadgeStoryBadge-error-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"error\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-error": {
    "completion": "BadgeStoryBadge-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"error\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-error-lg": {
    "completion": "BadgeStoryBadge-error-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"error\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-warning-sm": {
    "completion": "BadgeStoryBadge-warning-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"warning\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-warning": {
    "completion": "BadgeStoryBadge-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"warning\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-warning-lg": {
    "completion": "BadgeStoryBadge-warning-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"warning\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-success-sm": {
    "completion": "BadgeStoryBadge-success-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"success\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-success": {
    "completion": "BadgeStoryBadge-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"success\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-success-lg": {
    "completion": "BadgeStoryBadge-success-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"success\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-info-sm": {
    "completion": "BadgeStoryBadge-info-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"info\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-info": {
    "completion": "BadgeStoryBadge-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"info\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-info-lg": {
    "completion": "BadgeStoryBadge-info-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"info\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-sm": {
    "completion": "BadgeStoryBadge-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"muted\" size=\"sm\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge": {
    "completion": "BadgeStoryBadge",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"muted\" size=\"md\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "BadgeStoryBadge-lg": {
    "completion": "BadgeStoryBadge-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Badge variant=\"solid\" action=\"muted\" size=\"lg\">\n      <BadgeText>{text}</BadgeText>\n      <BadgeIcon ml=\"$1\" as={GlobeIcon} />\n    </Badge>\n  "
  },
  "ActionsheetStoryActionsheet": {
    "completion": "ActionsheetStoryActionsheet",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Actionsheet\n      isOpen={showActionsheet || showActionsheetProp}\n      onClose={handleClose}\n      showActionsheet=\"true\"\n    >\n      <ActionsheetBackdrop />\n      <ActionsheetContent>\n        <ActionsheetDragIndicatorWrapper>\n          <ActionsheetDragIndicator />\n        </ActionsheetDragIndicatorWrapper>\n        <ActionsheetItem onPress={handleClose} isDisabled>\n          <ActionsheetItemText>Delete</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Share</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Play</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Favourite</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Cancel</ActionsheetItemText>\n        </ActionsheetItem>\n      </ActionsheetContent>\n    </Actionsheet>\n  "
  },
  "ActionsheetStoryActionsheet-false": {
    "completion": "ActionsheetStoryActionsheet-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Actionsheet\n      isOpen={showActionsheet || showActionsheetProp}\n      onClose={handleClose}\n      showActionsheet=\"false\"\n    >\n      <ActionsheetBackdrop />\n      <ActionsheetContent>\n        <ActionsheetDragIndicatorWrapper>\n          <ActionsheetDragIndicator />\n        </ActionsheetDragIndicatorWrapper>\n        <ActionsheetItem onPress={handleClose} isDisabled>\n          <ActionsheetItemText>Delete</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Share</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Play</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Favourite</ActionsheetItemText>\n        </ActionsheetItem>\n        <ActionsheetItem onPress={handleClose}>\n          <ActionsheetItemText>Cancel</ActionsheetItemText>\n        </ActionsheetItem>\n      </ActionsheetContent>\n    </Actionsheet>\n  "
  },
  "ActionsheetExampleActionsheet": {
    "completion": "ActionsheetExampleActionsheet",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Actionsheet\n      isOpen={showActionsheet || showActionsheetProp}\n      onClose={handleClose}\n      showActionsheet=\"true\"\n    >\n      <ActionsheetBackdrop />\n      <ActionsheetContent>\n        <ActionsheetDragIndicatorWrapper>\n          <ActionsheetDragIndicator />\n        </ActionsheetDragIndicatorWrapper>\n        <ActionsheetVirtualizedList\n          data={data}\n          initialNumToRender={5}\n          renderItem={({ item }: any) => <Item title={item.title} />}\n          keyExtractor={(item: any) => item.id}\n          getItemCount={getItemCount}\n          getItem={getItem}\n        />\n      </ActionsheetContent>\n    </Actionsheet>\n  "
  },
  "ActionsheetExampleActionsheet-false": {
    "completion": "ActionsheetExampleActionsheet-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Actionsheet\n      isOpen={showActionsheet || showActionsheetProp}\n      onClose={handleClose}\n      showActionsheet=\"false\"\n    >\n      <ActionsheetBackdrop />\n      <ActionsheetContent>\n        <ActionsheetDragIndicatorWrapper>\n          <ActionsheetDragIndicator />\n        </ActionsheetDragIndicatorWrapper>\n        <ActionsheetVirtualizedList\n          data={data}\n          initialNumToRender={5}\n          renderItem={({ item }: any) => <Item title={item.title} />}\n          keyExtractor={(item: any) => item.id}\n          getItemCount={getItemCount}\n          getItem={getItem}\n        />\n      </ActionsheetContent>\n    </Actionsheet>\n  "
  },
  "AlertStoryAlert-info": {
    "completion": "AlertStoryAlert-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"solid\" action=\"info\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-error": {
    "completion": "AlertStoryAlert-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"solid\" action=\"error\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-warning": {
    "completion": "AlertStoryAlert-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"solid\" action=\"warning\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-muted": {
    "completion": "AlertStoryAlert-muted",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"solid\" action=\"muted\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert": {
    "completion": "AlertStoryAlert",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"solid\" action=\"success\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-accent-info": {
    "completion": "AlertStoryAlert-accent-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"accent\" action=\"info\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-accent-error": {
    "completion": "AlertStoryAlert-accent-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"accent\" action=\"error\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-accent-warning": {
    "completion": "AlertStoryAlert-accent-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"accent\" action=\"warning\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-accent-muted": {
    "completion": "AlertStoryAlert-accent-muted",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"accent\" action=\"muted\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-accent": {
    "completion": "AlertStoryAlert-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"accent\" action=\"success\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-outline-info": {
    "completion": "AlertStoryAlert-outline-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"outline\" action=\"info\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-outline-error": {
    "completion": "AlertStoryAlert-outline-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"outline\" action=\"error\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-outline-warning": {
    "completion": "AlertStoryAlert-outline-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"outline\" action=\"warning\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-outline-muted": {
    "completion": "AlertStoryAlert-outline-muted",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"outline\" action=\"muted\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertStoryAlert-outline": {
    "completion": "AlertStoryAlert-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Alert variant=\"outline\" action=\"success\">\n      <AlertIcon as={InfoIcon} mr=\"$3\" />\n      <AlertText>Selection successfully moved!</AlertText>\n    </Alert>\n  "
  },
  "AlertVariantsAlert-info": {
    "completion": "AlertVariantsAlert-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-error": {
    "completion": "AlertVariantsAlert-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-warning": {
    "completion": "AlertVariantsAlert-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-muted": {
    "completion": "AlertVariantsAlert-muted",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert": {
    "completion": "AlertVariantsAlert",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-accent-info": {
    "completion": "AlertVariantsAlert-accent-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-accent-error": {
    "completion": "AlertVariantsAlert-accent-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-accent-warning": {
    "completion": "AlertVariantsAlert-accent-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-accent-muted": {
    "completion": "AlertVariantsAlert-accent-muted",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-accent": {
    "completion": "AlertVariantsAlert-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-outline-info": {
    "completion": "AlertVariantsAlert-outline-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-outline-error": {
    "completion": "AlertVariantsAlert-outline-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-outline-warning": {
    "completion": "AlertVariantsAlert-outline-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-outline-muted": {
    "completion": "AlertVariantsAlert-outline-muted",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "AlertVariantsAlert-outline": {
    "completion": "AlertVariantsAlert-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Alert action=\"info\" variant={variant} mb={4}>\n        <AlertIcon as={Info} mr=\"$3\" />\n        <AlertText>\n          Unlock the power of knowledge with the following information. Get\n        </AlertText>\n      </Alert>\n      <Alert action=\"success\" variant={variant} mb={4}>\n        <AlertIcon as={CheckCircle2Icon} mr=\"$3\" />\n        <AlertText>\n          Boom! You did it! Please take a moment to pat yourself on the back.\n          You've earned it! Boom! You did it! Please take a moment to pat\n          yourself on the back. You've earned it!\n        </AlertText>\n      </Alert>\n      <Alert action=\"error\" variant={variant} mb={4}>\n        <AlertIcon as={XCircle} mr=\"$3\" />\n        <AlertText>\n          Uh-oh! It looks like the matrix has glitched. Our team of tech ninjas\n          are already on the case. Please hold tight while we fix the issue\n        </AlertText>\n      </Alert>\n      <Alert action=\"warning\" variant={variant} mb={4}>\n        <AlertIcon as={AlertCircleIcon} mr=\"$3\" />\n\n        <AlertText>\n          Warning: Reading the following content may cause spontaneous outbursts\n          of 'aha!' moments\n        </AlertText>\n      </Alert>\n      <Alert action=\"muted\" variant={variant}>\n        <AlertIcon as={BellIcon} mr=\"$3\" />\n        <AlertText>\n          Need a helping hand? Your help alert has just been activated, and\n          we're here to lend you our expertise, our experience, and our\n          enthusiasm. Let's do this!\n        </AlertText>\n      </Alert>\n    </Center>\n  "
  },
  "ProgressStoryProgress-xs": {
    "completion": "ProgressStoryProgress-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Progress w=\"70%\" value={value} size=\"xs\">\n      <ProgressFilledTrack />\n    </Progress>\n  "
  },
  "ProgressStoryProgress-sm": {
    "completion": "ProgressStoryProgress-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Progress w=\"70%\" value={value} size=\"sm\">\n      <ProgressFilledTrack />\n    </Progress>\n  "
  },
  "ProgressStoryProgress": {
    "completion": "ProgressStoryProgress",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Progress w=\"70%\" value={value} size=\"md\">\n      <ProgressFilledTrack />\n    </Progress>\n  "
  },
  "ProgressStoryProgress-lg": {
    "completion": "ProgressStoryProgress-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Progress w=\"70%\" value={value} size=\"lg\">\n      <ProgressFilledTrack />\n    </Progress>\n  "
  },
  "ProgressStoryProgress-xl": {
    "completion": "ProgressStoryProgress-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Progress w=\"70%\" value={value} size=\"xl\">\n      <ProgressFilledTrack />\n    </Progress>\n  "
  },
  "ProgressStoryProgress-2xl": {
    "completion": "ProgressStoryProgress-2xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Progress w=\"70%\" value={value} size=\"2xl\">\n      <ProgressFilledTrack />\n    </Progress>\n  "
  },
  "SpinnerStorySpinner": {
    "completion": "SpinnerStorySpinner",
    "imports": [
      "NewComponent"
    ],
    "template": ""
  },
  "SpinnerStorySpinner-large": {
    "completion": "SpinnerStorySpinner-large",
    "imports": [
      "NewComponent"
    ],
    "template": ""
  },
  "BasicToast-top-error": {
    "completion": "BasicToast-top-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"error\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-error-outline": {
    "completion": "BasicToast-top-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"error\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-error-accent": {
    "completion": "BasicToast-top-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"error\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-warning": {
    "completion": "BasicToast-top-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"warning\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-warning-outline": {
    "completion": "BasicToast-top-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"warning\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-warning-accent": {
    "completion": "BasicToast-top-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"warning\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-success": {
    "completion": "BasicToast-top-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"success\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-success-outline": {
    "completion": "BasicToast-top-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"success\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-success-accent": {
    "completion": "BasicToast-top-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"success\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-info": {
    "completion": "BasicToast-top-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"info\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-info-outline": {
    "completion": "BasicToast-top-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"info\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-info-accent": {
    "completion": "BasicToast-top-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"info\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-attention": {
    "completion": "BasicToast-top-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"attention\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-attention-outline": {
    "completion": "BasicToast-top-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"attention\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top-attention-accent": {
    "completion": "BasicToast-top-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top\" action=\"attention\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-error": {
    "completion": "BasicToast-top right-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"error\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-error-outline": {
    "completion": "BasicToast-top right-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"error\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-error-accent": {
    "completion": "BasicToast-top right-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"error\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-warning": {
    "completion": "BasicToast-top right-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"warning\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-warning-outline": {
    "completion": "BasicToast-top right-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"warning\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-warning-accent": {
    "completion": "BasicToast-top right-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"warning\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-success": {
    "completion": "BasicToast-top right-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"success\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-success-outline": {
    "completion": "BasicToast-top right-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"success\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-success-accent": {
    "completion": "BasicToast-top right-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"success\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-info": {
    "completion": "BasicToast-top right-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"info\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-info-outline": {
    "completion": "BasicToast-top right-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"info\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-info-accent": {
    "completion": "BasicToast-top right-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"info\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-attention": {
    "completion": "BasicToast-top right-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"attention\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-attention-outline": {
    "completion": "BasicToast-top right-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"attention\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top right-attention-accent": {
    "completion": "BasicToast-top right-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top right\" action=\"attention\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-error": {
    "completion": "BasicToast-top left-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"error\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-error-outline": {
    "completion": "BasicToast-top left-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"error\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-error-accent": {
    "completion": "BasicToast-top left-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"error\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-warning": {
    "completion": "BasicToast-top left-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"warning\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-warning-outline": {
    "completion": "BasicToast-top left-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"warning\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-warning-accent": {
    "completion": "BasicToast-top left-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"warning\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-success": {
    "completion": "BasicToast-top left-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"success\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-success-outline": {
    "completion": "BasicToast-top left-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"success\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-success-accent": {
    "completion": "BasicToast-top left-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"success\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-info": {
    "completion": "BasicToast-top left-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"info\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-info-outline": {
    "completion": "BasicToast-top left-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"info\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-info-accent": {
    "completion": "BasicToast-top left-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"info\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-attention": {
    "completion": "BasicToast-top left-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"attention\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-attention-outline": {
    "completion": "BasicToast-top left-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"attention\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-top left-attention-accent": {
    "completion": "BasicToast-top left-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"top left\" action=\"attention\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-error": {
    "completion": "BasicToast-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"error\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-error-outline": {
    "completion": "BasicToast-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"error\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-error-accent": {
    "completion": "BasicToast-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"error\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-warning": {
    "completion": "BasicToast-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"warning\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-warning-outline": {
    "completion": "BasicToast-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"warning\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-warning-accent": {
    "completion": "BasicToast-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"warning\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-success": {
    "completion": "BasicToast-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"success\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-success-outline": {
    "completion": "BasicToast-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"success\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-success-accent": {
    "completion": "BasicToast-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"success\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-info": {
    "completion": "BasicToast-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"info\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-info-outline": {
    "completion": "BasicToast-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"info\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-info-accent": {
    "completion": "BasicToast-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"info\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-attention": {
    "completion": "BasicToast-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"attention\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-attention-outline": {
    "completion": "BasicToast-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"attention\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-attention-accent": {
    "completion": "BasicToast-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom\" action=\"attention\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-error": {
    "completion": "BasicToast-bottom left-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"error\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-error-outline": {
    "completion": "BasicToast-bottom left-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"error\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-error-accent": {
    "completion": "BasicToast-bottom left-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"error\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-warning": {
    "completion": "BasicToast-bottom left-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"warning\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-warning-outline": {
    "completion": "BasicToast-bottom left-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"warning\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-warning-accent": {
    "completion": "BasicToast-bottom left-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"warning\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-success": {
    "completion": "BasicToast-bottom left-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"success\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-success-outline": {
    "completion": "BasicToast-bottom left-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"success\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-success-accent": {
    "completion": "BasicToast-bottom left-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"success\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-info": {
    "completion": "BasicToast-bottom left-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"info\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-info-outline": {
    "completion": "BasicToast-bottom left-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"info\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-info-accent": {
    "completion": "BasicToast-bottom left-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"info\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-attention": {
    "completion": "BasicToast-bottom left-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"attention\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-attention-outline": {
    "completion": "BasicToast-bottom left-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"attention\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom left-attention-accent": {
    "completion": "BasicToast-bottom left-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom left\" action=\"attention\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-error": {
    "completion": "BasicToast-bottom right-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"error\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-error-outline": {
    "completion": "BasicToast-bottom right-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"error\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-error-accent": {
    "completion": "BasicToast-bottom right-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"error\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-warning": {
    "completion": "BasicToast-bottom right-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"warning\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-warning-outline": {
    "completion": "BasicToast-bottom right-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"warning\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-warning-accent": {
    "completion": "BasicToast-bottom right-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"warning\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-success": {
    "completion": "BasicToast-bottom right-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"success\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-success-outline": {
    "completion": "BasicToast-bottom right-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"success\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-success-accent": {
    "completion": "BasicToast-bottom right-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"success\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-info": {
    "completion": "BasicToast-bottom right-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"info\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-info-outline": {
    "completion": "BasicToast-bottom right-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"info\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-info-accent": {
    "completion": "BasicToast-bottom right-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"info\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-attention": {
    "completion": "BasicToast-bottom right-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"attention\" variant=\"solid\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-attention-outline": {
    "completion": "BasicToast-bottom right-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"attention\" variant=\"outline\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "BasicToast-bottom right-attention-accent": {
    "completion": "BasicToast-bottom right-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          render: ({ id }) => {\n            return (\n              <Toast nativeId={id} placement=\"bottom right\" action=\"attention\" variant=\"accent\">\n                <ToastTitle>Hello World Toast {id}</ToastTitle>\n              </Toast>\n            "
  },
  "DuplicateToastPreventToast-top-error": {
    "completion": "DuplicateToastPreventToast-top-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"error\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-error-outline": {
    "completion": "DuplicateToastPreventToast-top-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"error\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-error-accent": {
    "completion": "DuplicateToastPreventToast-top-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"error\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-warning": {
    "completion": "DuplicateToastPreventToast-top-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"warning\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-warning-outline": {
    "completion": "DuplicateToastPreventToast-top-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"warning\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-warning-accent": {
    "completion": "DuplicateToastPreventToast-top-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"warning\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-success": {
    "completion": "DuplicateToastPreventToast-top-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"success\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-success-outline": {
    "completion": "DuplicateToastPreventToast-top-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"success\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-success-accent": {
    "completion": "DuplicateToastPreventToast-top-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"success\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-info": {
    "completion": "DuplicateToastPreventToast-top-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"info\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-info-outline": {
    "completion": "DuplicateToastPreventToast-top-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"info\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-info-accent": {
    "completion": "DuplicateToastPreventToast-top-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"info\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-attention": {
    "completion": "DuplicateToastPreventToast-top-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"attention\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-attention-outline": {
    "completion": "DuplicateToastPreventToast-top-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"attention\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top-attention-accent": {
    "completion": "DuplicateToastPreventToast-top-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top\" action=\"attention\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-error": {
    "completion": "DuplicateToastPreventToast-top right-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"error\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-error-outline": {
    "completion": "DuplicateToastPreventToast-top right-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"error\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-error-accent": {
    "completion": "DuplicateToastPreventToast-top right-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"error\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-warning": {
    "completion": "DuplicateToastPreventToast-top right-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"warning\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-warning-outline": {
    "completion": "DuplicateToastPreventToast-top right-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"warning\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-warning-accent": {
    "completion": "DuplicateToastPreventToast-top right-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"warning\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-success": {
    "completion": "DuplicateToastPreventToast-top right-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"success\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-success-outline": {
    "completion": "DuplicateToastPreventToast-top right-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"success\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-success-accent": {
    "completion": "DuplicateToastPreventToast-top right-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"success\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-info": {
    "completion": "DuplicateToastPreventToast-top right-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"info\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-info-outline": {
    "completion": "DuplicateToastPreventToast-top right-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"info\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-info-accent": {
    "completion": "DuplicateToastPreventToast-top right-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"info\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-attention": {
    "completion": "DuplicateToastPreventToast-top right-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"attention\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-attention-outline": {
    "completion": "DuplicateToastPreventToast-top right-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"attention\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top right-attention-accent": {
    "completion": "DuplicateToastPreventToast-top right-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top right\" action=\"attention\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-error": {
    "completion": "DuplicateToastPreventToast-top left-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"error\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-error-outline": {
    "completion": "DuplicateToastPreventToast-top left-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"error\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-error-accent": {
    "completion": "DuplicateToastPreventToast-top left-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"error\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-warning": {
    "completion": "DuplicateToastPreventToast-top left-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"warning\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-warning-outline": {
    "completion": "DuplicateToastPreventToast-top left-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"warning\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-warning-accent": {
    "completion": "DuplicateToastPreventToast-top left-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"warning\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-success": {
    "completion": "DuplicateToastPreventToast-top left-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"success\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-success-outline": {
    "completion": "DuplicateToastPreventToast-top left-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"success\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-success-accent": {
    "completion": "DuplicateToastPreventToast-top left-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"success\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-info": {
    "completion": "DuplicateToastPreventToast-top left-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"info\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-info-outline": {
    "completion": "DuplicateToastPreventToast-top left-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"info\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-info-accent": {
    "completion": "DuplicateToastPreventToast-top left-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"info\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-attention": {
    "completion": "DuplicateToastPreventToast-top left-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"attention\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-attention-outline": {
    "completion": "DuplicateToastPreventToast-top left-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"attention\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-top left-attention-accent": {
    "completion": "DuplicateToastPreventToast-top left-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"top left\" action=\"attention\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-error": {
    "completion": "DuplicateToastPreventToast-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"error\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-error-outline": {
    "completion": "DuplicateToastPreventToast-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"error\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-error-accent": {
    "completion": "DuplicateToastPreventToast-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"error\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-warning": {
    "completion": "DuplicateToastPreventToast-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"warning\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-warning-outline": {
    "completion": "DuplicateToastPreventToast-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"warning\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-warning-accent": {
    "completion": "DuplicateToastPreventToast-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"warning\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-success": {
    "completion": "DuplicateToastPreventToast-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"success\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-success-outline": {
    "completion": "DuplicateToastPreventToast-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"success\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-success-accent": {
    "completion": "DuplicateToastPreventToast-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"success\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-info": {
    "completion": "DuplicateToastPreventToast-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"info\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-info-outline": {
    "completion": "DuplicateToastPreventToast-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"info\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-info-accent": {
    "completion": "DuplicateToastPreventToast-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"info\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-attention": {
    "completion": "DuplicateToastPreventToast-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"attention\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-attention-outline": {
    "completion": "DuplicateToastPreventToast-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"attention\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-attention-accent": {
    "completion": "DuplicateToastPreventToast-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom\" action=\"attention\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-error": {
    "completion": "DuplicateToastPreventToast-bottom left-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"error\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-error-outline": {
    "completion": "DuplicateToastPreventToast-bottom left-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"error\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-error-accent": {
    "completion": "DuplicateToastPreventToast-bottom left-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"error\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-warning": {
    "completion": "DuplicateToastPreventToast-bottom left-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"warning\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-warning-outline": {
    "completion": "DuplicateToastPreventToast-bottom left-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"warning\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-warning-accent": {
    "completion": "DuplicateToastPreventToast-bottom left-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"warning\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-success": {
    "completion": "DuplicateToastPreventToast-bottom left-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"success\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-success-outline": {
    "completion": "DuplicateToastPreventToast-bottom left-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"success\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-success-accent": {
    "completion": "DuplicateToastPreventToast-bottom left-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"success\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-info": {
    "completion": "DuplicateToastPreventToast-bottom left-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"info\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-info-outline": {
    "completion": "DuplicateToastPreventToast-bottom left-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"info\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-info-accent": {
    "completion": "DuplicateToastPreventToast-bottom left-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"info\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-attention": {
    "completion": "DuplicateToastPreventToast-bottom left-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"attention\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-attention-outline": {
    "completion": "DuplicateToastPreventToast-bottom left-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"attention\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom left-attention-accent": {
    "completion": "DuplicateToastPreventToast-bottom left-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom left\" action=\"attention\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-error": {
    "completion": "DuplicateToastPreventToast-bottom right-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"error\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-error-outline": {
    "completion": "DuplicateToastPreventToast-bottom right-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"error\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-error-accent": {
    "completion": "DuplicateToastPreventToast-bottom right-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"error\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-warning": {
    "completion": "DuplicateToastPreventToast-bottom right-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"warning\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-warning-outline": {
    "completion": "DuplicateToastPreventToast-bottom right-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"warning\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-warning-accent": {
    "completion": "DuplicateToastPreventToast-bottom right-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"warning\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-success": {
    "completion": "DuplicateToastPreventToast-bottom right-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"success\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-success-outline": {
    "completion": "DuplicateToastPreventToast-bottom right-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"success\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-success-accent": {
    "completion": "DuplicateToastPreventToast-bottom right-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"success\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-info": {
    "completion": "DuplicateToastPreventToast-bottom right-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"info\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-info-outline": {
    "completion": "DuplicateToastPreventToast-bottom right-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"info\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-info-accent": {
    "completion": "DuplicateToastPreventToast-bottom right-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"info\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-attention": {
    "completion": "DuplicateToastPreventToast-bottom right-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"attention\" variant=\"solid\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-attention-outline": {
    "completion": "DuplicateToastPreventToast-bottom right-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"attention\" variant=\"outline\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "DuplicateToastPreventToast-bottom right-attention-accent": {
    "completion": "DuplicateToastPreventToast-bottom right-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      placement=\"bottom right\" action=\"attention\" variant=\"accent\"\n      onPress={() => {\n        if (!toast.isActive(idTest)) {\n          toast.show({\n            id: idTest,\n            placement: placement,\n            render: ({ id }) => {\n              return (\n                <Toast>\n                  <ToastTitle>Hello World Toast {id}</ToastTitle>\n                </Toast>\n              "
  },
  "ToastStoryToast-top-error": {
    "completion": "ToastStoryToast-top-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"error\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-error-outline": {
    "completion": "ToastStoryToast-top-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"error\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-error-accent": {
    "completion": "ToastStoryToast-top-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"error\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-warning": {
    "completion": "ToastStoryToast-top-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"warning\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-warning-outline": {
    "completion": "ToastStoryToast-top-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"warning\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-warning-accent": {
    "completion": "ToastStoryToast-top-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"warning\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-success": {
    "completion": "ToastStoryToast-top-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"success\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-success-outline": {
    "completion": "ToastStoryToast-top-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"success\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-success-accent": {
    "completion": "ToastStoryToast-top-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"success\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-info": {
    "completion": "ToastStoryToast-top-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"info\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-info-outline": {
    "completion": "ToastStoryToast-top-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"info\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-info-accent": {
    "completion": "ToastStoryToast-top-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"info\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-attention": {
    "completion": "ToastStoryToast-top-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"attention\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-attention-outline": {
    "completion": "ToastStoryToast-top-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"attention\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top-attention-accent": {
    "completion": "ToastStoryToast-top-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top\" action=\"attention\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-error": {
    "completion": "ToastStoryToast-top right-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"error\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-error-outline": {
    "completion": "ToastStoryToast-top right-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"error\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-error-accent": {
    "completion": "ToastStoryToast-top right-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"error\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-warning": {
    "completion": "ToastStoryToast-top right-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"warning\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-warning-outline": {
    "completion": "ToastStoryToast-top right-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"warning\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-warning-accent": {
    "completion": "ToastStoryToast-top right-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"warning\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-success": {
    "completion": "ToastStoryToast-top right-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"success\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-success-outline": {
    "completion": "ToastStoryToast-top right-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"success\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-success-accent": {
    "completion": "ToastStoryToast-top right-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"success\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-info": {
    "completion": "ToastStoryToast-top right-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"info\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-info-outline": {
    "completion": "ToastStoryToast-top right-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"info\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-info-accent": {
    "completion": "ToastStoryToast-top right-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"info\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-attention": {
    "completion": "ToastStoryToast-top right-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"attention\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-attention-outline": {
    "completion": "ToastStoryToast-top right-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"attention\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top right-attention-accent": {
    "completion": "ToastStoryToast-top right-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top right\" action=\"attention\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-error": {
    "completion": "ToastStoryToast-top left-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"error\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-error-outline": {
    "completion": "ToastStoryToast-top left-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"error\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-error-accent": {
    "completion": "ToastStoryToast-top left-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"error\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-warning": {
    "completion": "ToastStoryToast-top left-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"warning\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-warning-outline": {
    "completion": "ToastStoryToast-top left-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"warning\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-warning-accent": {
    "completion": "ToastStoryToast-top left-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"warning\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-success": {
    "completion": "ToastStoryToast-top left-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"success\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-success-outline": {
    "completion": "ToastStoryToast-top left-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"success\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-success-accent": {
    "completion": "ToastStoryToast-top left-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"success\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-info": {
    "completion": "ToastStoryToast-top left-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"info\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-info-outline": {
    "completion": "ToastStoryToast-top left-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"info\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-info-accent": {
    "completion": "ToastStoryToast-top left-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"info\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-attention": {
    "completion": "ToastStoryToast-top left-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"attention\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-attention-outline": {
    "completion": "ToastStoryToast-top left-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"attention\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-top left-attention-accent": {
    "completion": "ToastStoryToast-top left-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"top left\" action=\"attention\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-error": {
    "completion": "ToastStoryToast-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"error\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-error-outline": {
    "completion": "ToastStoryToast-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"error\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-error-accent": {
    "completion": "ToastStoryToast-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"error\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-warning": {
    "completion": "ToastStoryToast-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"warning\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-warning-outline": {
    "completion": "ToastStoryToast-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"warning\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-warning-accent": {
    "completion": "ToastStoryToast-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"warning\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-success": {
    "completion": "ToastStoryToast-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"success\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-success-outline": {
    "completion": "ToastStoryToast-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"success\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-success-accent": {
    "completion": "ToastStoryToast-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"success\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-info": {
    "completion": "ToastStoryToast-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"info\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-info-outline": {
    "completion": "ToastStoryToast-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"info\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-info-accent": {
    "completion": "ToastStoryToast-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"info\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-attention": {
    "completion": "ToastStoryToast-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"attention\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-attention-outline": {
    "completion": "ToastStoryToast-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"attention\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-attention-accent": {
    "completion": "ToastStoryToast-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom\" action=\"attention\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-error": {
    "completion": "ToastStoryToast-bottom left-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"error\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-error-outline": {
    "completion": "ToastStoryToast-bottom left-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"error\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-error-accent": {
    "completion": "ToastStoryToast-bottom left-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"error\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-warning": {
    "completion": "ToastStoryToast-bottom left-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"warning\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-warning-outline": {
    "completion": "ToastStoryToast-bottom left-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"warning\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-warning-accent": {
    "completion": "ToastStoryToast-bottom left-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"warning\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-success": {
    "completion": "ToastStoryToast-bottom left-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"success\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-success-outline": {
    "completion": "ToastStoryToast-bottom left-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"success\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-success-accent": {
    "completion": "ToastStoryToast-bottom left-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"success\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-info": {
    "completion": "ToastStoryToast-bottom left-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"info\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-info-outline": {
    "completion": "ToastStoryToast-bottom left-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"info\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-info-accent": {
    "completion": "ToastStoryToast-bottom left-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"info\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-attention": {
    "completion": "ToastStoryToast-bottom left-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"attention\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-attention-outline": {
    "completion": "ToastStoryToast-bottom left-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"attention\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom left-attention-accent": {
    "completion": "ToastStoryToast-bottom left-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom left\" action=\"attention\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-error": {
    "completion": "ToastStoryToast-bottom right-error",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"error\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-error-outline": {
    "completion": "ToastStoryToast-bottom right-error-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"error\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-error-accent": {
    "completion": "ToastStoryToast-bottom right-error-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"error\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-warning": {
    "completion": "ToastStoryToast-bottom right-warning",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"warning\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-warning-outline": {
    "completion": "ToastStoryToast-bottom right-warning-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"warning\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-warning-accent": {
    "completion": "ToastStoryToast-bottom right-warning-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"warning\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-success": {
    "completion": "ToastStoryToast-bottom right-success",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"success\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-success-outline": {
    "completion": "ToastStoryToast-bottom right-success-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"success\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-success-accent": {
    "completion": "ToastStoryToast-bottom right-success-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"success\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-info": {
    "completion": "ToastStoryToast-bottom right-info",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"info\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-info-outline": {
    "completion": "ToastStoryToast-bottom right-info-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"info\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-info-accent": {
    "completion": "ToastStoryToast-bottom right-info-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"info\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-attention": {
    "completion": "ToastStoryToast-bottom right-attention",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"attention\" variant=\"solid\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-attention-outline": {
    "completion": "ToastStoryToast-bottom right-attention-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"attention\" variant=\"outline\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ToastStoryToast-bottom right-attention-accent": {
    "completion": "ToastStoryToast-bottom right-attention-accent",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button\n      onPress={() => {\n        toast.show({\n          placement: placement,\n          duration: null,\n          render: ({ id }) => {\n            return (\n              <>\n                <Toast nativeID={id} placement=\"bottom right\" action=\"attention\" variant=\"accent\">\n                  <VStack space=\"xs\">\n                    <ToastTitle>Hello World Toast </ToastTitle>\n                    <ToastDescription>\n                      Please create a support tibnnbcket from the support page\n                    </ToastDescription>\n                  </VStack>\n                  <Pressable onPress={() => toast.close(id)}>\n                    <Icon as={CloseIcon} color=\"$coolGray50\" />\n                  </Pressable>\n                </Toast>\n              </>\n            "
  },
  "ButtonStoryButton-link-xs": {
    "completion": "ButtonStoryButton-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"link\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-link-sm": {
    "completion": "ButtonStoryButton-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"link\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-link": {
    "completion": "ButtonStoryButton-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"link\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-link-lg": {
    "completion": "ButtonStoryButton-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"link\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-link-xl": {
    "completion": "ButtonStoryButton-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"link\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-outline-xs": {
    "completion": "ButtonStoryButton-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"outline\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-outline-sm": {
    "completion": "ButtonStoryButton-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"outline\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-outline": {
    "completion": "ButtonStoryButton-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"outline\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-outline-lg": {
    "completion": "ButtonStoryButton-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"outline\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-outline-xl": {
    "completion": "ButtonStoryButton-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"outline\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-xs": {
    "completion": "ButtonStoryButton-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"solid\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-sm": {
    "completion": "ButtonStoryButton-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"solid\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton": {
    "completion": "ButtonStoryButton",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"solid\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-lg": {
    "completion": "ButtonStoryButton-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"solid\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-xl": {
    "completion": "ButtonStoryButton-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"primary\" variant=\"solid\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-link-xs": {
    "completion": "ButtonStoryButton-secondary-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"link\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-link-sm": {
    "completion": "ButtonStoryButton-secondary-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"link\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-link": {
    "completion": "ButtonStoryButton-secondary-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"link\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-link-lg": {
    "completion": "ButtonStoryButton-secondary-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"link\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-link-xl": {
    "completion": "ButtonStoryButton-secondary-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"link\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-outline-xs": {
    "completion": "ButtonStoryButton-secondary-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"outline\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-outline-sm": {
    "completion": "ButtonStoryButton-secondary-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"outline\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-outline": {
    "completion": "ButtonStoryButton-secondary-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"outline\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-outline-lg": {
    "completion": "ButtonStoryButton-secondary-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"outline\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-outline-xl": {
    "completion": "ButtonStoryButton-secondary-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"outline\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-xs": {
    "completion": "ButtonStoryButton-secondary-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"solid\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-sm": {
    "completion": "ButtonStoryButton-secondary-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"solid\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary": {
    "completion": "ButtonStoryButton-secondary",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"solid\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-lg": {
    "completion": "ButtonStoryButton-secondary-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"solid\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-secondary-xl": {
    "completion": "ButtonStoryButton-secondary-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"secondary\" variant=\"solid\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-link-xs": {
    "completion": "ButtonStoryButton-positive-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"link\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-link-sm": {
    "completion": "ButtonStoryButton-positive-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"link\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-link": {
    "completion": "ButtonStoryButton-positive-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"link\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-link-lg": {
    "completion": "ButtonStoryButton-positive-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"link\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-link-xl": {
    "completion": "ButtonStoryButton-positive-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"link\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-outline-xs": {
    "completion": "ButtonStoryButton-positive-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"outline\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-outline-sm": {
    "completion": "ButtonStoryButton-positive-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"outline\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-outline": {
    "completion": "ButtonStoryButton-positive-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"outline\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-outline-lg": {
    "completion": "ButtonStoryButton-positive-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"outline\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-outline-xl": {
    "completion": "ButtonStoryButton-positive-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"outline\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-xs": {
    "completion": "ButtonStoryButton-positive-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"solid\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-sm": {
    "completion": "ButtonStoryButton-positive-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"solid\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive": {
    "completion": "ButtonStoryButton-positive",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"solid\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-lg": {
    "completion": "ButtonStoryButton-positive-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"solid\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-positive-xl": {
    "completion": "ButtonStoryButton-positive-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"positive\" variant=\"solid\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-link-xs": {
    "completion": "ButtonStoryButton-negative-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"link\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-link-sm": {
    "completion": "ButtonStoryButton-negative-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"link\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-link": {
    "completion": "ButtonStoryButton-negative-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"link\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-link-lg": {
    "completion": "ButtonStoryButton-negative-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"link\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-link-xl": {
    "completion": "ButtonStoryButton-negative-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"link\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-outline-xs": {
    "completion": "ButtonStoryButton-negative-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"outline\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-outline-sm": {
    "completion": "ButtonStoryButton-negative-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"outline\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-outline": {
    "completion": "ButtonStoryButton-negative-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"outline\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-outline-lg": {
    "completion": "ButtonStoryButton-negative-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"outline\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-outline-xl": {
    "completion": "ButtonStoryButton-negative-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"outline\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-xs": {
    "completion": "ButtonStoryButton-negative-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"solid\" size=\"xs\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-sm": {
    "completion": "ButtonStoryButton-negative-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"solid\" size=\"sm\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative": {
    "completion": "ButtonStoryButton-negative",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"solid\" size=\"md\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-lg": {
    "completion": "ButtonStoryButton-negative-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"solid\" size=\"lg\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonStoryButton-negative-xl": {
    "completion": "ButtonStoryButton-negative-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Button action=\"negative\" variant=\"solid\" size=\"xl\">\n      <ButtonText>{text}</ButtonText>\n    </Button>\n  "
  },
  "ButtonGroupStoryButton-link-xs": {
    "completion": "ButtonGroupStoryButton-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"link\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-link-sm": {
    "completion": "ButtonGroupStoryButton-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"link\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-link": {
    "completion": "ButtonGroupStoryButton-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"link\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-link-lg": {
    "completion": "ButtonGroupStoryButton-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"link\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-link-xl": {
    "completion": "ButtonGroupStoryButton-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"link\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-outline-xs": {
    "completion": "ButtonGroupStoryButton-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"outline\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-outline-sm": {
    "completion": "ButtonGroupStoryButton-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"outline\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-outline": {
    "completion": "ButtonGroupStoryButton-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"outline\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-outline-lg": {
    "completion": "ButtonGroupStoryButton-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"outline\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-outline-xl": {
    "completion": "ButtonGroupStoryButton-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"outline\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-xs": {
    "completion": "ButtonGroupStoryButton-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"solid\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-sm": {
    "completion": "ButtonGroupStoryButton-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"solid\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton": {
    "completion": "ButtonGroupStoryButton",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"solid\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-lg": {
    "completion": "ButtonGroupStoryButton-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"solid\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-xl": {
    "completion": "ButtonGroupStoryButton-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"primary\" variant=\"solid\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-link-xs": {
    "completion": "ButtonGroupStoryButton-secondary-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"link\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-link-sm": {
    "completion": "ButtonGroupStoryButton-secondary-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"link\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-link": {
    "completion": "ButtonGroupStoryButton-secondary-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"link\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-link-lg": {
    "completion": "ButtonGroupStoryButton-secondary-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"link\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-link-xl": {
    "completion": "ButtonGroupStoryButton-secondary-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"link\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-outline-xs": {
    "completion": "ButtonGroupStoryButton-secondary-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"outline\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-outline-sm": {
    "completion": "ButtonGroupStoryButton-secondary-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"outline\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-outline": {
    "completion": "ButtonGroupStoryButton-secondary-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"outline\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-outline-lg": {
    "completion": "ButtonGroupStoryButton-secondary-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"outline\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-outline-xl": {
    "completion": "ButtonGroupStoryButton-secondary-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"outline\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-xs": {
    "completion": "ButtonGroupStoryButton-secondary-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"solid\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-sm": {
    "completion": "ButtonGroupStoryButton-secondary-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"solid\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary": {
    "completion": "ButtonGroupStoryButton-secondary",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"solid\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-lg": {
    "completion": "ButtonGroupStoryButton-secondary-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"solid\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-secondary-xl": {
    "completion": "ButtonGroupStoryButton-secondary-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"secondary\" variant=\"solid\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-link-xs": {
    "completion": "ButtonGroupStoryButton-positive-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"link\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-link-sm": {
    "completion": "ButtonGroupStoryButton-positive-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"link\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-link": {
    "completion": "ButtonGroupStoryButton-positive-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"link\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-link-lg": {
    "completion": "ButtonGroupStoryButton-positive-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"link\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-link-xl": {
    "completion": "ButtonGroupStoryButton-positive-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"link\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-outline-xs": {
    "completion": "ButtonGroupStoryButton-positive-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"outline\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-outline-sm": {
    "completion": "ButtonGroupStoryButton-positive-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"outline\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-outline": {
    "completion": "ButtonGroupStoryButton-positive-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"outline\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-outline-lg": {
    "completion": "ButtonGroupStoryButton-positive-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"outline\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-outline-xl": {
    "completion": "ButtonGroupStoryButton-positive-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"outline\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-xs": {
    "completion": "ButtonGroupStoryButton-positive-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"solid\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-sm": {
    "completion": "ButtonGroupStoryButton-positive-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"solid\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive": {
    "completion": "ButtonGroupStoryButton-positive",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"solid\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-lg": {
    "completion": "ButtonGroupStoryButton-positive-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"solid\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-positive-xl": {
    "completion": "ButtonGroupStoryButton-positive-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"positive\" variant=\"solid\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-link-xs": {
    "completion": "ButtonGroupStoryButton-negative-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"link\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-link-sm": {
    "completion": "ButtonGroupStoryButton-negative-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"link\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-link": {
    "completion": "ButtonGroupStoryButton-negative-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"link\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-link-lg": {
    "completion": "ButtonGroupStoryButton-negative-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"link\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-link-xl": {
    "completion": "ButtonGroupStoryButton-negative-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"link\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-outline-xs": {
    "completion": "ButtonGroupStoryButton-negative-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"outline\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-outline-sm": {
    "completion": "ButtonGroupStoryButton-negative-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"outline\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-outline": {
    "completion": "ButtonGroupStoryButton-negative-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"outline\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-outline-lg": {
    "completion": "ButtonGroupStoryButton-negative-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"outline\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-outline-xl": {
    "completion": "ButtonGroupStoryButton-negative-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"outline\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-xs": {
    "completion": "ButtonGroupStoryButton-negative-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"solid\" size=\"xs\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-sm": {
    "completion": "ButtonGroupStoryButton-negative-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"solid\" size=\"sm\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative": {
    "completion": "ButtonGroupStoryButton-negative",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"solid\" size=\"md\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-lg": {
    "completion": "ButtonGroupStoryButton-negative-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"solid\" size=\"lg\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonGroupStoryButton-negative-xl": {
    "completion": "ButtonGroupStoryButton-negative-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // @ts-ignore\n    <ButtonGroup action=\"negative\" variant=\"solid\" size=\"xl\">\n      <Button>\n        <ButtonText>Button 1</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 2</ButtonText>\n      </Button>\n      <Button>\n        <ButtonText>Button 3</ButtonText>\n      </Button>\n    </ButtonGroup>\n  "
  },
  "ButtonIsLoadingExampleButton-link-xs": {
    "completion": "ButtonIsLoadingExampleButton-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-link-sm": {
    "completion": "ButtonIsLoadingExampleButton-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-link": {
    "completion": "ButtonIsLoadingExampleButton-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-link-lg": {
    "completion": "ButtonIsLoadingExampleButton-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-link-xl": {
    "completion": "ButtonIsLoadingExampleButton-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-outline-xs": {
    "completion": "ButtonIsLoadingExampleButton-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-outline-sm": {
    "completion": "ButtonIsLoadingExampleButton-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-outline": {
    "completion": "ButtonIsLoadingExampleButton-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-outline-lg": {
    "completion": "ButtonIsLoadingExampleButton-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-outline-xl": {
    "completion": "ButtonIsLoadingExampleButton-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-xs": {
    "completion": "ButtonIsLoadingExampleButton-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-sm": {
    "completion": "ButtonIsLoadingExampleButton-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton": {
    "completion": "ButtonIsLoadingExampleButton",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-lg": {
    "completion": "ButtonIsLoadingExampleButton-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-xl": {
    "completion": "ButtonIsLoadingExampleButton-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-link-xs": {
    "completion": "ButtonIsLoadingExampleButton-secondary-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-link-sm": {
    "completion": "ButtonIsLoadingExampleButton-secondary-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-link": {
    "completion": "ButtonIsLoadingExampleButton-secondary-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-link-lg": {
    "completion": "ButtonIsLoadingExampleButton-secondary-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-link-xl": {
    "completion": "ButtonIsLoadingExampleButton-secondary-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-outline-xs": {
    "completion": "ButtonIsLoadingExampleButton-secondary-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-outline-sm": {
    "completion": "ButtonIsLoadingExampleButton-secondary-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-outline": {
    "completion": "ButtonIsLoadingExampleButton-secondary-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-outline-lg": {
    "completion": "ButtonIsLoadingExampleButton-secondary-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-outline-xl": {
    "completion": "ButtonIsLoadingExampleButton-secondary-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-xs": {
    "completion": "ButtonIsLoadingExampleButton-secondary-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-sm": {
    "completion": "ButtonIsLoadingExampleButton-secondary-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary": {
    "completion": "ButtonIsLoadingExampleButton-secondary",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-lg": {
    "completion": "ButtonIsLoadingExampleButton-secondary-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-secondary-xl": {
    "completion": "ButtonIsLoadingExampleButton-secondary-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-link-xs": {
    "completion": "ButtonIsLoadingExampleButton-positive-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-link-sm": {
    "completion": "ButtonIsLoadingExampleButton-positive-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-link": {
    "completion": "ButtonIsLoadingExampleButton-positive-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-link-lg": {
    "completion": "ButtonIsLoadingExampleButton-positive-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-link-xl": {
    "completion": "ButtonIsLoadingExampleButton-positive-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-outline-xs": {
    "completion": "ButtonIsLoadingExampleButton-positive-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-outline-sm": {
    "completion": "ButtonIsLoadingExampleButton-positive-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-outline": {
    "completion": "ButtonIsLoadingExampleButton-positive-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-outline-lg": {
    "completion": "ButtonIsLoadingExampleButton-positive-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-outline-xl": {
    "completion": "ButtonIsLoadingExampleButton-positive-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-xs": {
    "completion": "ButtonIsLoadingExampleButton-positive-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-sm": {
    "completion": "ButtonIsLoadingExampleButton-positive-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive": {
    "completion": "ButtonIsLoadingExampleButton-positive",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-lg": {
    "completion": "ButtonIsLoadingExampleButton-positive-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-positive-xl": {
    "completion": "ButtonIsLoadingExampleButton-positive-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-link-xs": {
    "completion": "ButtonIsLoadingExampleButton-negative-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-link-sm": {
    "completion": "ButtonIsLoadingExampleButton-negative-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-link": {
    "completion": "ButtonIsLoadingExampleButton-negative-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-link-lg": {
    "completion": "ButtonIsLoadingExampleButton-negative-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-link-xl": {
    "completion": "ButtonIsLoadingExampleButton-negative-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-outline-xs": {
    "completion": "ButtonIsLoadingExampleButton-negative-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-outline-sm": {
    "completion": "ButtonIsLoadingExampleButton-negative-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-outline": {
    "completion": "ButtonIsLoadingExampleButton-negative-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-outline-lg": {
    "completion": "ButtonIsLoadingExampleButton-negative-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-outline-xl": {
    "completion": "ButtonIsLoadingExampleButton-negative-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-xs": {
    "completion": "ButtonIsLoadingExampleButton-negative-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-sm": {
    "completion": "ButtonIsLoadingExampleButton-negative-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative": {
    "completion": "ButtonIsLoadingExampleButton-negative",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-lg": {
    "completion": "ButtonIsLoadingExampleButton-negative-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonIsLoadingExampleButton-negative-xl": {
    "completion": "ButtonIsLoadingExampleButton-negative-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" />\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonSpinner color=\"white\" mr=\"$2\" />\n        <ButtonText>Submitting</ButtonText>\n      </Button>\n      <Button\n        disabled={isLoading}\n        focusable={!isLoading}\n        opacity={isLoading ? 0.4 : 1}\n      >\n        <ButtonText>Submitting</ButtonText>\n        <ButtonSpinner color=\"white\" ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonSizesExampleButton-link-xs": {
    "completion": "ButtonSizesExampleButton-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-link-sm": {
    "completion": "ButtonSizesExampleButton-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-link": {
    "completion": "ButtonSizesExampleButton-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-link-lg": {
    "completion": "ButtonSizesExampleButton-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-link-xl": {
    "completion": "ButtonSizesExampleButton-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-outline-xs": {
    "completion": "ButtonSizesExampleButton-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-outline-sm": {
    "completion": "ButtonSizesExampleButton-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-outline": {
    "completion": "ButtonSizesExampleButton-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-outline-lg": {
    "completion": "ButtonSizesExampleButton-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-outline-xl": {
    "completion": "ButtonSizesExampleButton-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-xs": {
    "completion": "ButtonSizesExampleButton-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-sm": {
    "completion": "ButtonSizesExampleButton-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton": {
    "completion": "ButtonSizesExampleButton",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-lg": {
    "completion": "ButtonSizesExampleButton-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-xl": {
    "completion": "ButtonSizesExampleButton-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-link-xs": {
    "completion": "ButtonSizesExampleButton-secondary-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-link-sm": {
    "completion": "ButtonSizesExampleButton-secondary-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-link": {
    "completion": "ButtonSizesExampleButton-secondary-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-link-lg": {
    "completion": "ButtonSizesExampleButton-secondary-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-link-xl": {
    "completion": "ButtonSizesExampleButton-secondary-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-outline-xs": {
    "completion": "ButtonSizesExampleButton-secondary-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-outline-sm": {
    "completion": "ButtonSizesExampleButton-secondary-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-outline": {
    "completion": "ButtonSizesExampleButton-secondary-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-outline-lg": {
    "completion": "ButtonSizesExampleButton-secondary-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-outline-xl": {
    "completion": "ButtonSizesExampleButton-secondary-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-xs": {
    "completion": "ButtonSizesExampleButton-secondary-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-sm": {
    "completion": "ButtonSizesExampleButton-secondary-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary": {
    "completion": "ButtonSizesExampleButton-secondary",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-lg": {
    "completion": "ButtonSizesExampleButton-secondary-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-secondary-xl": {
    "completion": "ButtonSizesExampleButton-secondary-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-link-xs": {
    "completion": "ButtonSizesExampleButton-positive-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-link-sm": {
    "completion": "ButtonSizesExampleButton-positive-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-link": {
    "completion": "ButtonSizesExampleButton-positive-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-link-lg": {
    "completion": "ButtonSizesExampleButton-positive-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-link-xl": {
    "completion": "ButtonSizesExampleButton-positive-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-outline-xs": {
    "completion": "ButtonSizesExampleButton-positive-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-outline-sm": {
    "completion": "ButtonSizesExampleButton-positive-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-outline": {
    "completion": "ButtonSizesExampleButton-positive-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-outline-lg": {
    "completion": "ButtonSizesExampleButton-positive-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-outline-xl": {
    "completion": "ButtonSizesExampleButton-positive-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-xs": {
    "completion": "ButtonSizesExampleButton-positive-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-sm": {
    "completion": "ButtonSizesExampleButton-positive-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive": {
    "completion": "ButtonSizesExampleButton-positive",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-lg": {
    "completion": "ButtonSizesExampleButton-positive-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-positive-xl": {
    "completion": "ButtonSizesExampleButton-positive-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-link-xs": {
    "completion": "ButtonSizesExampleButton-negative-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-link-sm": {
    "completion": "ButtonSizesExampleButton-negative-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-link": {
    "completion": "ButtonSizesExampleButton-negative-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-link-lg": {
    "completion": "ButtonSizesExampleButton-negative-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-link-xl": {
    "completion": "ButtonSizesExampleButton-negative-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-outline-xs": {
    "completion": "ButtonSizesExampleButton-negative-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-outline-sm": {
    "completion": "ButtonSizesExampleButton-negative-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-outline": {
    "completion": "ButtonSizesExampleButton-negative-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-outline-lg": {
    "completion": "ButtonSizesExampleButton-negative-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-outline-xl": {
    "completion": "ButtonSizesExampleButton-negative-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-xs": {
    "completion": "ButtonSizesExampleButton-negative-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-sm": {
    "completion": "ButtonSizesExampleButton-negative-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative": {
    "completion": "ButtonSizesExampleButton-negative",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-lg": {
    "completion": "ButtonSizesExampleButton-negative-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonSizesExampleButton-negative-xl": {
    "completion": "ButtonSizesExampleButton-negative-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" justifyContent=\"center\" alignItems=\"center\">\n      {sizes.map((size: any) => {\n        return (\n          <Button mt=\"$4\" size={size} key={size}>\n            <ButtonText>Button</ButtonText>\n            <ButtonIcon as={AddIcon} ml=\"$2\" />\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-link-xs": {
    "completion": "ButtonStylesExampleButton-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-link-sm": {
    "completion": "ButtonStylesExampleButton-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-link": {
    "completion": "ButtonStylesExampleButton-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-link-lg": {
    "completion": "ButtonStylesExampleButton-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-link-xl": {
    "completion": "ButtonStylesExampleButton-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-outline-xs": {
    "completion": "ButtonStylesExampleButton-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-outline-sm": {
    "completion": "ButtonStylesExampleButton-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-outline": {
    "completion": "ButtonStylesExampleButton-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-outline-lg": {
    "completion": "ButtonStylesExampleButton-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-outline-xl": {
    "completion": "ButtonStylesExampleButton-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-xs": {
    "completion": "ButtonStylesExampleButton-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-sm": {
    "completion": "ButtonStylesExampleButton-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton": {
    "completion": "ButtonStylesExampleButton",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-lg": {
    "completion": "ButtonStylesExampleButton-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-xl": {
    "completion": "ButtonStylesExampleButton-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-link-xs": {
    "completion": "ButtonStylesExampleButton-secondary-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-link-sm": {
    "completion": "ButtonStylesExampleButton-secondary-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-link": {
    "completion": "ButtonStylesExampleButton-secondary-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-link-lg": {
    "completion": "ButtonStylesExampleButton-secondary-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-link-xl": {
    "completion": "ButtonStylesExampleButton-secondary-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-outline-xs": {
    "completion": "ButtonStylesExampleButton-secondary-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-outline-sm": {
    "completion": "ButtonStylesExampleButton-secondary-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-outline": {
    "completion": "ButtonStylesExampleButton-secondary-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-outline-lg": {
    "completion": "ButtonStylesExampleButton-secondary-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-outline-xl": {
    "completion": "ButtonStylesExampleButton-secondary-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-xs": {
    "completion": "ButtonStylesExampleButton-secondary-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-sm": {
    "completion": "ButtonStylesExampleButton-secondary-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary": {
    "completion": "ButtonStylesExampleButton-secondary",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-lg": {
    "completion": "ButtonStylesExampleButton-secondary-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-secondary-xl": {
    "completion": "ButtonStylesExampleButton-secondary-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-link-xs": {
    "completion": "ButtonStylesExampleButton-positive-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-link-sm": {
    "completion": "ButtonStylesExampleButton-positive-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-link": {
    "completion": "ButtonStylesExampleButton-positive-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-link-lg": {
    "completion": "ButtonStylesExampleButton-positive-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-link-xl": {
    "completion": "ButtonStylesExampleButton-positive-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-outline-xs": {
    "completion": "ButtonStylesExampleButton-positive-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-outline-sm": {
    "completion": "ButtonStylesExampleButton-positive-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-outline": {
    "completion": "ButtonStylesExampleButton-positive-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-outline-lg": {
    "completion": "ButtonStylesExampleButton-positive-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-outline-xl": {
    "completion": "ButtonStylesExampleButton-positive-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-xs": {
    "completion": "ButtonStylesExampleButton-positive-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-sm": {
    "completion": "ButtonStylesExampleButton-positive-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive": {
    "completion": "ButtonStylesExampleButton-positive",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-lg": {
    "completion": "ButtonStylesExampleButton-positive-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-positive-xl": {
    "completion": "ButtonStylesExampleButton-positive-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-link-xs": {
    "completion": "ButtonStylesExampleButton-negative-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-link-sm": {
    "completion": "ButtonStylesExampleButton-negative-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-link": {
    "completion": "ButtonStylesExampleButton-negative-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-link-lg": {
    "completion": "ButtonStylesExampleButton-negative-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-link-xl": {
    "completion": "ButtonStylesExampleButton-negative-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-outline-xs": {
    "completion": "ButtonStylesExampleButton-negative-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-outline-sm": {
    "completion": "ButtonStylesExampleButton-negative-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-outline": {
    "completion": "ButtonStylesExampleButton-negative-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-outline-lg": {
    "completion": "ButtonStylesExampleButton-negative-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-outline-xl": {
    "completion": "ButtonStylesExampleButton-negative-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-xs": {
    "completion": "ButtonStylesExampleButton-negative-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-sm": {
    "completion": "ButtonStylesExampleButton-negative-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative": {
    "completion": "ButtonStylesExampleButton-negative",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-lg": {
    "completion": "ButtonStylesExampleButton-negative-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonStylesExampleButton-negative-xl": {
    "completion": "ButtonStylesExampleButton-negative-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\">\n      {variants.map((variant: any) => {\n        return (\n          <Button variant={variant} mt=\"$4\">\n            <ButtonText>{variant}</ButtonText>\n          </Button>\n        "
  },
  "ButtonWithIconsTempButton-link-xs": {
    "completion": "ButtonWithIconsTempButton-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-link-sm": {
    "completion": "ButtonWithIconsTempButton-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-link": {
    "completion": "ButtonWithIconsTempButton-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-link-lg": {
    "completion": "ButtonWithIconsTempButton-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-link-xl": {
    "completion": "ButtonWithIconsTempButton-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-outline-xs": {
    "completion": "ButtonWithIconsTempButton-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-outline-sm": {
    "completion": "ButtonWithIconsTempButton-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-outline": {
    "completion": "ButtonWithIconsTempButton-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-outline-lg": {
    "completion": "ButtonWithIconsTempButton-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-outline-xl": {
    "completion": "ButtonWithIconsTempButton-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-xs": {
    "completion": "ButtonWithIconsTempButton-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-sm": {
    "completion": "ButtonWithIconsTempButton-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton": {
    "completion": "ButtonWithIconsTempButton",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-lg": {
    "completion": "ButtonWithIconsTempButton-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-xl": {
    "completion": "ButtonWithIconsTempButton-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-link-xs": {
    "completion": "ButtonWithIconsTempButton-secondary-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-link-sm": {
    "completion": "ButtonWithIconsTempButton-secondary-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-link": {
    "completion": "ButtonWithIconsTempButton-secondary-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-link-lg": {
    "completion": "ButtonWithIconsTempButton-secondary-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-link-xl": {
    "completion": "ButtonWithIconsTempButton-secondary-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-outline-xs": {
    "completion": "ButtonWithIconsTempButton-secondary-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-outline-sm": {
    "completion": "ButtonWithIconsTempButton-secondary-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-outline": {
    "completion": "ButtonWithIconsTempButton-secondary-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-outline-lg": {
    "completion": "ButtonWithIconsTempButton-secondary-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-outline-xl": {
    "completion": "ButtonWithIconsTempButton-secondary-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-xs": {
    "completion": "ButtonWithIconsTempButton-secondary-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-sm": {
    "completion": "ButtonWithIconsTempButton-secondary-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary": {
    "completion": "ButtonWithIconsTempButton-secondary",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-lg": {
    "completion": "ButtonWithIconsTempButton-secondary-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-secondary-xl": {
    "completion": "ButtonWithIconsTempButton-secondary-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-link-xs": {
    "completion": "ButtonWithIconsTempButton-positive-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-link-sm": {
    "completion": "ButtonWithIconsTempButton-positive-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-link": {
    "completion": "ButtonWithIconsTempButton-positive-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-link-lg": {
    "completion": "ButtonWithIconsTempButton-positive-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-link-xl": {
    "completion": "ButtonWithIconsTempButton-positive-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-outline-xs": {
    "completion": "ButtonWithIconsTempButton-positive-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-outline-sm": {
    "completion": "ButtonWithIconsTempButton-positive-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-outline": {
    "completion": "ButtonWithIconsTempButton-positive-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-outline-lg": {
    "completion": "ButtonWithIconsTempButton-positive-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-outline-xl": {
    "completion": "ButtonWithIconsTempButton-positive-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-xs": {
    "completion": "ButtonWithIconsTempButton-positive-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-sm": {
    "completion": "ButtonWithIconsTempButton-positive-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive": {
    "completion": "ButtonWithIconsTempButton-positive",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-lg": {
    "completion": "ButtonWithIconsTempButton-positive-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-positive-xl": {
    "completion": "ButtonWithIconsTempButton-positive-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-link-xs": {
    "completion": "ButtonWithIconsTempButton-negative-link-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-link-sm": {
    "completion": "ButtonWithIconsTempButton-negative-link-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-link": {
    "completion": "ButtonWithIconsTempButton-negative-link",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-link-lg": {
    "completion": "ButtonWithIconsTempButton-negative-link-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-link-xl": {
    "completion": "ButtonWithIconsTempButton-negative-link-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-outline-xs": {
    "completion": "ButtonWithIconsTempButton-negative-outline-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-outline-sm": {
    "completion": "ButtonWithIconsTempButton-negative-outline-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-outline": {
    "completion": "ButtonWithIconsTempButton-negative-outline",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-outline-lg": {
    "completion": "ButtonWithIconsTempButton-negative-outline-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-outline-xl": {
    "completion": "ButtonWithIconsTempButton-negative-outline-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-xs": {
    "completion": "ButtonWithIconsTempButton-negative-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-sm": {
    "completion": "ButtonWithIconsTempButton-negative-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative": {
    "completion": "ButtonWithIconsTempButton-negative",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-lg": {
    "completion": "ButtonWithIconsTempButton-negative-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "ButtonWithIconsTempButton-negative-xl": {
    "completion": "ButtonWithIconsTempButton-negative-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\">\n      <Button>\n        <ButtonIcon as={InfoIcon} mr=\"$2\" />\n        <ButtonText>LeftIcon</ButtonText>\n      </Button>\n      <Button variant=\"solid\">\n        <ButtonText>RightIcon</ButtonText>\n        <ButtonIcon as={AddIcon} ml=\"$2\" />\n      </Button>\n    </HStack>\n  "
  },
  "CheckboxStoryCheckbox-sm": {
    "completion": "CheckboxStoryCheckbox-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <CheckboxGroup\n      accessibilityLabel=\"Checkbox Group\"\n      isDisabled={props.isDisabled}\n      isReadOnly={props.isReadOnly}\n      value={values}\n      onChange={setValues}\n      size=\"sm\"\n      nativeID=\"checkbox-group\"\n    >\n      <Checkbox\n        m=\"$2\"\n        size={props.size}\n        isInvalid={props.isInvalid}\n        isIndeterminate\n        value=\"Label 1\"\n        aria-label=\"Label 1\"\n        accessibilityLabel=\"Checkbox\"\n        onChange={(isSelected: boolean) =>\n          // eslint-disable-next-line no-console\n          console.log(isSelected, '###')\n        }\n        nativeID=\"checkbox-1\"\n      >\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 1</CheckboxLabel>\n      </Checkbox>\n      <Checkbox\n        m=\"$2\"\n        isInvalid={props.isInvalid}\n        size={props.size}\n        aria-label=\"Label 2\"\n        value=\"Label 2\"\n        accessibilityLabel=\"Checkbox\"\n        onChange={(isSelected: boolean) =>\n          // eslint-disable-next-line no-console\n          console.log(isSelected, '###')\n        }\n        nativeID=\"checkbox-2\"\n      >\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 2</CheckboxLabel>\n      </Checkbox>\n    </CheckboxGroup>\n  "
  },
  "CheckboxStoryCheckbox": {
    "completion": "CheckboxStoryCheckbox",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <CheckboxGroup\n      accessibilityLabel=\"Checkbox Group\"\n      isDisabled={props.isDisabled}\n      isReadOnly={props.isReadOnly}\n      value={values}\n      onChange={setValues}\n      size=\"md\"\n      nativeID=\"checkbox-group\"\n    >\n      <Checkbox\n        m=\"$2\"\n        size={props.size}\n        isInvalid={props.isInvalid}\n        isIndeterminate\n        value=\"Label 1\"\n        aria-label=\"Label 1\"\n        accessibilityLabel=\"Checkbox\"\n        onChange={(isSelected: boolean) =>\n          // eslint-disable-next-line no-console\n          console.log(isSelected, '###')\n        }\n        nativeID=\"checkbox-1\"\n      >\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 1</CheckboxLabel>\n      </Checkbox>\n      <Checkbox\n        m=\"$2\"\n        isInvalid={props.isInvalid}\n        size={props.size}\n        aria-label=\"Label 2\"\n        value=\"Label 2\"\n        accessibilityLabel=\"Checkbox\"\n        onChange={(isSelected: boolean) =>\n          // eslint-disable-next-line no-console\n          console.log(isSelected, '###')\n        }\n        nativeID=\"checkbox-2\"\n      >\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 2</CheckboxLabel>\n      </Checkbox>\n    </CheckboxGroup>\n  "
  },
  "CheckboxStoryCheckbox-lg": {
    "completion": "CheckboxStoryCheckbox-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <CheckboxGroup\n      accessibilityLabel=\"Checkbox Group\"\n      isDisabled={props.isDisabled}\n      isReadOnly={props.isReadOnly}\n      value={values}\n      onChange={setValues}\n      size=\"lg\"\n      nativeID=\"checkbox-group\"\n    >\n      <Checkbox\n        m=\"$2\"\n        size={props.size}\n        isInvalid={props.isInvalid}\n        isIndeterminate\n        value=\"Label 1\"\n        aria-label=\"Label 1\"\n        accessibilityLabel=\"Checkbox\"\n        onChange={(isSelected: boolean) =>\n          // eslint-disable-next-line no-console\n          console.log(isSelected, '###')\n        }\n        nativeID=\"checkbox-1\"\n      >\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 1</CheckboxLabel>\n      </Checkbox>\n      <Checkbox\n        m=\"$2\"\n        isInvalid={props.isInvalid}\n        size={props.size}\n        aria-label=\"Label 2\"\n        value=\"Label 2\"\n        accessibilityLabel=\"Checkbox\"\n        onChange={(isSelected: boolean) =>\n          // eslint-disable-next-line no-console\n          console.log(isSelected, '###')\n        }\n        nativeID=\"checkbox-2\"\n      >\n        <CheckboxIndicator mr=\"$2\">\n          <CheckboxIcon as={CheckIcon} />\n        </CheckboxIndicator>\n        <CheckboxLabel>Label 2</CheckboxLabel>\n      </Checkbox>\n    </CheckboxGroup>\n  "
  },
  "FormControlStoryFormControl-sm": {
    "completion": "FormControlStoryFormControl-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <FormControl size=\"sm\">\n      <FormControlLabel>\n        <FormControlLabelText>Password</FormControlLabelText>\n      </FormControlLabel>\n      <Input>\n        <InputField\n          type=\"password\"\n          defaultValue=\"12345\"\n          placeholder=\"password\"\n        />\n      </Input>\n\n      <FormControlHelper>\n        <FormControlHelperText>\n          Must be atleast 6 characters.\n        </FormControlHelperText>\n      </FormControlHelper>\n\n      <FormControlError>\n        <FormControlErrorIcon>\n          <Icon\n            as={AlertCircleIcon}\n            sx={{ color: '$red500', height: '$3', width: '$3' }}\n          />\n        </FormControlErrorIcon>\n        <FormControlErrorText>\n          Atleast 6 characters are required.\n        </FormControlErrorText>\n      </FormControlError>\n    </FormControl>\n  "
  },
  "FormControlStoryFormControl": {
    "completion": "FormControlStoryFormControl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <FormControl size=\"md\">\n      <FormControlLabel>\n        <FormControlLabelText>Password</FormControlLabelText>\n      </FormControlLabel>\n      <Input>\n        <InputField\n          type=\"password\"\n          defaultValue=\"12345\"\n          placeholder=\"password\"\n        />\n      </Input>\n\n      <FormControlHelper>\n        <FormControlHelperText>\n          Must be atleast 6 characters.\n        </FormControlHelperText>\n      </FormControlHelper>\n\n      <FormControlError>\n        <FormControlErrorIcon>\n          <Icon\n            as={AlertCircleIcon}\n            sx={{ color: '$red500', height: '$3', width: '$3' }}\n          />\n        </FormControlErrorIcon>\n        <FormControlErrorText>\n          Atleast 6 characters are required.\n        </FormControlErrorText>\n      </FormControlError>\n    </FormControl>\n  "
  },
  "FormControlStoryFormControl-lg": {
    "completion": "FormControlStoryFormControl-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <FormControl size=\"lg\">\n      <FormControlLabel>\n        <FormControlLabelText>Password</FormControlLabelText>\n      </FormControlLabel>\n      <Input>\n        <InputField\n          type=\"password\"\n          defaultValue=\"12345\"\n          placeholder=\"password\"\n        />\n      </Input>\n\n      <FormControlHelper>\n        <FormControlHelperText>\n          Must be atleast 6 characters.\n        </FormControlHelperText>\n      </FormControlHelper>\n\n      <FormControlError>\n        <FormControlErrorIcon>\n          <Icon\n            as={AlertCircleIcon}\n            sx={{ color: '$red500', height: '$3', width: '$3' }}\n          />\n        </FormControlErrorIcon>\n        <FormControlErrorText>\n          Atleast 6 characters are required.\n        </FormControlErrorText>\n      </FormControlError>\n    </FormControl>\n  "
  },
  "FormControlStoryFormControl-xl": {
    "completion": "FormControlStoryFormControl-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <FormControl size=\"xl\">\n      <FormControlLabel>\n        <FormControlLabelText>Password</FormControlLabelText>\n      </FormControlLabel>\n      <Input>\n        <InputField\n          type=\"password\"\n          defaultValue=\"12345\"\n          placeholder=\"password\"\n        />\n      </Input>\n\n      <FormControlHelper>\n        <FormControlHelperText>\n          Must be atleast 6 characters.\n        </FormControlHelperText>\n      </FormControlHelper>\n\n      <FormControlError>\n        <FormControlErrorIcon>\n          <Icon\n            as={AlertCircleIcon}\n            sx={{ color: '$red500', height: '$3', width: '$3' }}\n          />\n        </FormControlErrorIcon>\n        <FormControlErrorText>\n          Atleast 6 characters are required.\n        </FormControlErrorText>\n      </FormControlError>\n    </FormControl>\n  "
  },
  "InputStoryInput": {
    "completion": "InputStoryInput",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"sm\" variant=\"outline\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-underlined": {
    "completion": "InputStoryInput-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"sm\" variant=\"underlined\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-rounded": {
    "completion": "InputStoryInput-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"sm\" variant=\"rounded\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-md": {
    "completion": "InputStoryInput-md",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"md\" variant=\"outline\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-md-underlined": {
    "completion": "InputStoryInput-md-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"md\" variant=\"underlined\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-md-rounded": {
    "completion": "InputStoryInput-md-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"md\" variant=\"rounded\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-lg": {
    "completion": "InputStoryInput-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"lg\" variant=\"outline\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-lg-underlined": {
    "completion": "InputStoryInput-lg-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"lg\" variant=\"underlined\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-lg-rounded": {
    "completion": "InputStoryInput-lg-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"lg\" variant=\"rounded\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-xl": {
    "completion": "InputStoryInput-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"xl\" variant=\"outline\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-xl-underlined": {
    "completion": "InputStoryInput-xl-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"xl\" variant=\"underlined\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "InputStoryInput-xl-rounded": {
    "completion": "InputStoryInput-xl-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" w=\"$full\">\n      <Input size=\"xl\" variant=\"rounded\" size=\"sm\">\n        <InputField\n          onChange={(e: any) => {\n            setValue(e.nativeEvent.text"
  },
  "PressableStoryPressable": {
    "completion": "PressableStoryPressable",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Pressable\n      // eslint-disable-next-line no-console\n      onPress={() => console.log('Hello')}\n      \n      sx={{ h: 100, w: 200 }}\n    >\n      <Center\n        sx={{\n          h: '100%',\n          w: '100%',\n          bg: '$primary500',\n        }}\n      >\n        <Text sx={{ color: '$white' }}>PRESSABLE</Text>\n      </Center>\n    </Pressable>\n  "
  },
  "RadioStoryRadio": {
    "completion": "RadioStoryRadio",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <RadioGroup\n      isDisabled={isDisabled}\n      isReadOnly={isReadOnly}\n      value={values}\n      onChange={setValues}\n    >\n      <Radio\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        size={size}\n        value=\"Label 1\"\n        accessibilityLabel=\"Radio\"\n        onChange={(nextValue: boolean) => console.log(nextValue, 'nextValue')}\n        \n      >\n        <RadioIndicator>\n          <RadioIcon as={CircleIcon} />\n        </RadioIndicator>\n        <RadioLabel>Label 1</RadioLabel>\n      </Radio>\n      <Radio\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        size={size}\n        value=\"Label 2\"\n        accessibilityLabel=\"Radio\"\n        onChange={(nextValue: boolean) => console.log(nextValue, 'nextValue')}\n      >\n        <RadioIndicator>\n          <RadioIcon as={CircleIcon} />\n        </RadioIndicator>\n        <RadioLabel>Label 2</RadioLabel>\n      </Radio>\n      <Radio\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        size={size}\n        value=\"Label 3\"\n        accessibilityLabel=\"Radio\"\n        onChange={(isSelected: boolean) =>\n          console.log(isSelected, 'isSelected')\n        }\n      >\n        <RadioIndicator>\n          <RadioIcon as={CircleIcon} />\n        </RadioIndicator>\n        <RadioLabel>Label 3</RadioLabel>\n      </Radio>\n    </RadioGroup>\n  "
  },
  "RadioGroupRadio": {
    "completion": "RadioGroupRadio",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <RadioGroup\n      isDisabled={isDisabled}\n      isReadOnly={isReadOnly}\n      value={values}\n      onChange={setValues}\n    >\n      <Radio\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        size={size}\n        value=\"Label 1\"\n        accessibilityLabel=\"Radio\"\n        onChange={(nextValue: boolean) => console.log(nextValue, 'nextValue')}\n        \n      >\n        <RadioIndicator>\n          <RadioIcon>\n            <CircleIcon />\n          </RadioIcon>\n        </RadioIndicator>\n        <RadioLabel>Label 1</RadioLabel>\n      </Radio>\n      <Radio\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        size={size}\n        value=\"Label 2\"\n        accessibilityLabel=\"Radio\"\n        onChange={(nextValue: boolean) => console.log(nextValue, 'nextValue')}\n      >\n        <RadioIndicator>\n          <RadioIcon>\n            <CircleIcon />\n          </RadioIcon>\n        </RadioIndicator>\n        <RadioLabel>Label 2</RadioLabel>\n      </Radio>\n      <Radio\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        size={size}\n        value=\"Label 3\"\n        accessibilityLabel=\"Radio\"\n        onChange={(isSelected: boolean) =>\n          console.log(isSelected, 'isSelected')\n        }\n      >\n        <RadioIndicator>\n          <RadioIcon>\n            <CircleIcon />\n          </RadioIcon>\n        </RadioIndicator>\n        <RadioLabel>Label 3</RadioLabel>\n      </Radio>\n    </RadioGroup>\n  "
  },
  "SelectStorySelect-xl-underlined-true": {
    "completion": "SelectStorySelect-xl-underlined-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"xl\" variant=\"underlined\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-xl-underlined": {
    "completion": "SelectStorySelect-xl-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"xl\" variant=\"underlined\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-xl-true": {
    "completion": "SelectStorySelect-xl-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"xl\" variant=\"outline\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-xl": {
    "completion": "SelectStorySelect-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"xl\" variant=\"outline\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-xl-rounded-true": {
    "completion": "SelectStorySelect-xl-rounded-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"xl\" variant=\"rounded\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-xl-rounded": {
    "completion": "SelectStorySelect-xl-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"xl\" variant=\"rounded\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-lg-underlined-true": {
    "completion": "SelectStorySelect-lg-underlined-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"lg\" variant=\"underlined\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-lg-underlined": {
    "completion": "SelectStorySelect-lg-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"lg\" variant=\"underlined\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-lg-true": {
    "completion": "SelectStorySelect-lg-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"lg\" variant=\"outline\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-lg": {
    "completion": "SelectStorySelect-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"lg\" variant=\"outline\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-lg-rounded-true": {
    "completion": "SelectStorySelect-lg-rounded-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"lg\" variant=\"rounded\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-lg-rounded": {
    "completion": "SelectStorySelect-lg-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"lg\" variant=\"rounded\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-underlined-true": {
    "completion": "SelectStorySelect-underlined-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"md\" variant=\"underlined\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-underlined": {
    "completion": "SelectStorySelect-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"md\" variant=\"underlined\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-true": {
    "completion": "SelectStorySelect-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"md\" variant=\"outline\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect": {
    "completion": "SelectStorySelect",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"md\" variant=\"outline\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-rounded-true": {
    "completion": "SelectStorySelect-rounded-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"md\" variant=\"rounded\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-rounded": {
    "completion": "SelectStorySelect-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"md\" variant=\"rounded\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-sm-underlined-true": {
    "completion": "SelectStorySelect-sm-underlined-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"sm\" variant=\"underlined\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-sm-underlined": {
    "completion": "SelectStorySelect-sm-underlined",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"sm\" variant=\"underlined\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-sm-true": {
    "completion": "SelectStorySelect-sm-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"sm\" variant=\"outline\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-sm": {
    "completion": "SelectStorySelect-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"sm\" variant=\"outline\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-sm-rounded-true": {
    "completion": "SelectStorySelect-sm-rounded-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"sm\" variant=\"rounded\" isReadOnly=\"true\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SelectStorySelect-sm-rounded": {
    "completion": "SelectStorySelect-sm-rounded",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Select isDisabled={isDisabled} isInvalid={isInvalid} size=\"sm\" variant=\"rounded\" isReadOnly=\"false\">\n      <SelectTrigger>\n        <SelectInput placeholder=\"Select option\" />\n        <SelectIcon mr=\"$3\">\n          <Icon as={ChevronDownIcon} />\n        </SelectIcon>\n      </SelectTrigger>\n      <SelectPortal>\n        <SelectBackdrop />\n        <SelectContent>\n          <SelectDragIndicatorWrapper>\n            <SelectDragIndicator />\n          </SelectDragIndicatorWrapper>\n          <SelectVirtualizedList\n            data={data}\n            initialNumToRender={5}\n            renderItem={({ item }: any) => <Item title={item.title} />}\n            keyExtractor={(item: any) => item.id}\n            getItemCount={getItemCount}\n            getItem={getItem}\n          />\n        </SelectContent>\n      </SelectPortal>\n    </Select>\n  "
  },
  "SliderStorySlider-sm-vertical": {
    "completion": "SliderStorySlider-sm-vertical",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box w={200} h={200}>\n      <Slider\n        mt=\"$4\"\n        value={sliderValue}\n        onChange={(value: any) => {\n          handleChange(value"
  },
  "SliderStorySlider-sm-horizontal": {
    "completion": "SliderStorySlider-sm-horizontal",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box w={200} h={200}>\n      <Slider\n        mt=\"$4\"\n        value={sliderValue}\n        onChange={(value: any) => {\n          handleChange(value"
  },
  "SliderStorySlider-vertical": {
    "completion": "SliderStorySlider-vertical",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box w={200} h={200}>\n      <Slider\n        mt=\"$4\"\n        value={sliderValue}\n        onChange={(value: any) => {\n          handleChange(value"
  },
  "SliderStorySlider-horizontal": {
    "completion": "SliderStorySlider-horizontal",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box w={200} h={200}>\n      <Slider\n        mt=\"$4\"\n        value={sliderValue}\n        onChange={(value: any) => {\n          handleChange(value"
  },
  "SliderStorySlider-lg-vertical": {
    "completion": "SliderStorySlider-lg-vertical",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box w={200} h={200}>\n      <Slider\n        mt=\"$4\"\n        value={sliderValue}\n        onChange={(value: any) => {\n          handleChange(value"
  },
  "SliderStorySlider-lg-horizontal": {
    "completion": "SliderStorySlider-lg-horizontal",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box w={200} h={200}>\n      <Slider\n        mt=\"$4\"\n        value={sliderValue}\n        onChange={(value: any) => {\n          handleChange(value"
  },
  "SwitchStorySwitch-true": {
    "completion": "SwitchStorySwitch-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Switch\n      defaultValue={true}\n      value={isEnabled}\n      onValueChange={(val: any) => setIsEnabled(val)}\n      isDisabled={isDisabled}\n      isEnabled=\"true\"\n    />\n  "
  },
  "SwitchStorySwitch": {
    "completion": "SwitchStorySwitch",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Switch\n      defaultValue={true}\n      value={isEnabled}\n      onValueChange={(val: any) => setIsEnabled(val)}\n      isDisabled={isDisabled}\n      isEnabled=\"false\"\n    />\n  "
  },
  "TabsStoryTabs-true": {
    "completion": "TabsStoryTabs-true",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tabs w=\"$full\" value=\"tab1\">\n      <TabsTabList>\n        <TabsTab value=\"tab1\">\n          <TabsTabTitle>Tab 1</TabsTabTitle>\n        </TabsTab>\n        <TabsTab value=\"tab2\">\n          <TabsTabTitle>Tab 2</TabsTabTitle>\n        </TabsTab>\n        <TabsTab value=\"tab3\">\n          <TabsTabTitle>Tab 3</TabsTabTitle>\n        </TabsTab>\n      </TabsTabList>\n      <TabsTabPanels mt=\"$4\">\n        <TabsTabPanel value=\"tab1\">\n          <Text>Hello world 1</Text>\n        </TabsTabPanel>\n        <TabsTabPanel value=\"tab2\">\n          <Text>Hello world 2</Text>\n        </TabsTabPanel>\n        <TabsTabPanel value=\"tab3\">\n          <Text>Hello world 3</Text>\n        </TabsTabPanel>\n      </TabsTabPanels>\n    </Tabs>\n  "
  },
  "TabsStoryTabs": {
    "completion": "TabsStoryTabs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tabs w=\"$full\" value=\"tab1\">\n      <TabsTabList>\n        <TabsTab value=\"tab1\">\n          <TabsTabTitle>Tab 1</TabsTabTitle>\n        </TabsTab>\n        <TabsTab value=\"tab2\">\n          <TabsTabTitle>Tab 2</TabsTabTitle>\n        </TabsTab>\n        <TabsTab value=\"tab3\">\n          <TabsTabTitle>Tab 3</TabsTabTitle>\n        </TabsTab>\n      </TabsTabList>\n      <TabsTabPanels mt=\"$4\">\n        <TabsTabPanel value=\"tab1\">\n          <Text>Hello world 1</Text>\n        </TabsTabPanel>\n        <TabsTabPanel value=\"tab2\">\n          <Text>Hello world 2</Text>\n        </TabsTabPanel>\n        <TabsTabPanel value=\"tab3\">\n          <Text>Hello world 3</Text>\n        </TabsTabPanel>\n      </TabsTabPanels>\n    </Tabs>\n  "
  },
  "TextareaStoryTextarea-sm": {
    "completion": "TextareaStoryTextarea-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Textarea size=\"sm\" mx=\"$2\">\n      <TextareaInput placeholder=\"Your text goes here...\" />\n    </Textarea>\n  "
  },
  "TextareaStoryTextarea": {
    "completion": "TextareaStoryTextarea",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Textarea size=\"md\" mx=\"$2\">\n      <TextareaInput placeholder=\"Your text goes here...\" />\n    </Textarea>\n  "
  },
  "TextareaStoryTextarea-lg": {
    "completion": "TextareaStoryTextarea-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Textarea size=\"lg\" mx=\"$2\">\n      <TextareaInput placeholder=\"Your text goes here...\" />\n    </Textarea>\n  "
  },
  "TextareaStoryTextarea-xl": {
    "completion": "TextareaStoryTextarea-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Textarea size=\"xl\" mx=\"$2\">\n      <TextareaInput placeholder=\"Your text goes here...\" />\n    </Textarea>\n  "
  },
  "CenterStoryCenter": {
    "completion": "CenterStoryCenter",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center bg=\"$primary500\" h={200} w={300}>\n      <Text color=\"white\" fontWeight=\"$bold\">\n        This is the center.\n      </Text>\n    </Center>\n  "
  },
  "ShapeExampleCenter": {
    "completion": "ShapeExampleCenter",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={'md'}>\n      <Center bg=\"$pink800\" h={60} w={60} borderRadius={999} >\n        <Text color=\"white\" fontWeight=\"$bold\">\n          Circle\n        </Text>\n      </Center>\n    </HStack>\n  "
  },
  "HStackStoryHStack-xs": {
    "completion": "HStackStoryHStack-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" reversed={reversed} space=\"xs\">\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackStoryHStack-sm": {
    "completion": "HStackStoryHStack-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" reversed={reversed} space=\"sm\">\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackStoryHStack": {
    "completion": "HStackStoryHStack",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" reversed={reversed} space=\"md\">\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackStoryHStack-lg": {
    "completion": "HStackStoryHStack-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" reversed={reversed} space=\"lg\">\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackStoryHStack-xl": {
    "completion": "HStackStoryHStack-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" reversed={reversed} space=\"xl\">\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackReversedExampleHStack-xs": {
    "completion": "HStackReversedExampleHStack-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" space=\"xs\" reversed>\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackReversedExampleHStack-sm": {
    "completion": "HStackReversedExampleHStack-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" space=\"sm\" reversed>\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackReversedExampleHStack": {
    "completion": "HStackReversedExampleHStack",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" space=\"md\" reversed>\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackReversedExampleHStack-lg": {
    "completion": "HStackReversedExampleHStack-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" space=\"lg\" reversed>\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "HStackReversedExampleHStack-xl": {
    "completion": "HStackReversedExampleHStack-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space={space} mt=\"$5\" space=\"xl\" reversed>\n      <Box sx={{ w: 100, h: 100, bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, bg: '$blue600' }} />\n    </HStack>\n  "
  },
  "VStackStoryVStack-xs": {
    "completion": "VStackStoryVStack-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack\n      space={space}\n      //@ts-ignore\n      sx={{ justifyContent: 'center', alignItems: 'center' }}\n      reversed={reversed}\n      space=\"xs\"\n    >\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackStoryVStack-sm": {
    "completion": "VStackStoryVStack-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack\n      space={space}\n      //@ts-ignore\n      sx={{ justifyContent: 'center', alignItems: 'center' }}\n      reversed={reversed}\n      space=\"sm\"\n    >\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackStoryVStack": {
    "completion": "VStackStoryVStack",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack\n      space={space}\n      //@ts-ignore\n      sx={{ justifyContent: 'center', alignItems: 'center' }}\n      reversed={reversed}\n      space=\"md\"\n    >\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackStoryVStack-lg": {
    "completion": "VStackStoryVStack-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack\n      space={space}\n      //@ts-ignore\n      sx={{ justifyContent: 'center', alignItems: 'center' }}\n      reversed={reversed}\n      space=\"lg\"\n    >\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackStoryVStack-xl": {
    "completion": "VStackStoryVStack-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack\n      space={space}\n      //@ts-ignore\n      sx={{ justifyContent: 'center', alignItems: 'center' }}\n      reversed={reversed}\n      space=\"xl\"\n    >\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackReversedExampleVStack-xs": {
    "completion": "VStackReversedExampleVStack-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space={space} mt=\"$5\" space=\"xs\" reversed>\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackReversedExampleVStack-sm": {
    "completion": "VStackReversedExampleVStack-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space={space} mt=\"$5\" space=\"sm\" reversed>\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackReversedExampleVStack": {
    "completion": "VStackReversedExampleVStack",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space={space} mt=\"$5\" space=\"md\" reversed>\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackReversedExampleVStack-lg": {
    "completion": "VStackReversedExampleVStack-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space={space} mt=\"$5\" space=\"lg\" reversed>\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "VStackReversedExampleVStack-xl": {
    "completion": "VStackReversedExampleVStack-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space={space} mt=\"$5\" space=\"xl\" reversed>\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue300' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue400' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue500' }} />\n      <Box sx={{ w: 100, h: 100, rounded: '$sm', bg: '$blue600' }} />\n    </VStack>\n  "
  },
  "AvatarStoryAvatar-xs": {
    "completion": "AvatarStoryAvatar-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: uri,\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://broken.link',\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n    </HStack>\n  "
  },
  "AvatarStoryAvatar-sm": {
    "completion": "AvatarStoryAvatar-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: uri,\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://broken.link',\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n    </HStack>\n  "
  },
  "AvatarStoryAvatar": {
    "completion": "AvatarStoryAvatar",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: uri,\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://broken.link',\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n    </HStack>\n  "
  },
  "AvatarStoryAvatar-lg": {
    "completion": "AvatarStoryAvatar-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: uri,\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://broken.link',\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n    </HStack>\n  "
  },
  "AvatarStoryAvatar-xl": {
    "completion": "AvatarStoryAvatar-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: uri,\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://broken.link',\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n    </HStack>\n  "
  },
  "AvatarStoryAvatar-2xl": {
    "completion": "AvatarStoryAvatar-2xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: uri,\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n      <Avatar size={size}>\n        <AvatarFallbackText>{fallbackText}</AvatarFallbackText>\n        <AvatarImage\n          source={{\n            uri: 'https://broken.link',\n          }}\n        />\n        {badge && <AvatarBadge />}\n      </Avatar>\n    </HStack>\n  "
  },
  "AvatarGroupExampleAvatar-xs": {
    "completion": "AvatarGroupExampleAvatar-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <AvatarGroup>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n      </AvatarGroup>\n    </HStack>\n  "
  },
  "AvatarGroupExampleAvatar-sm": {
    "completion": "AvatarGroupExampleAvatar-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <AvatarGroup>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n      </AvatarGroup>\n    </HStack>\n  "
  },
  "AvatarGroupExampleAvatar": {
    "completion": "AvatarGroupExampleAvatar",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <AvatarGroup>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n      </AvatarGroup>\n    </HStack>\n  "
  },
  "AvatarGroupExampleAvatar-lg": {
    "completion": "AvatarGroupExampleAvatar-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <AvatarGroup>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n      </AvatarGroup>\n    </HStack>\n  "
  },
  "AvatarGroupExampleAvatar-xl": {
    "completion": "AvatarGroupExampleAvatar-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <AvatarGroup>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n      </AvatarGroup>\n    </HStack>\n  "
  },
  "AvatarGroupExampleAvatar-2xl": {
    "completion": "AvatarGroupExampleAvatar-2xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <HStack space=\"md\" h=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <AvatarGroup>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1614289371518-722f2615943d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n        <Avatar size={size}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1607746882042-944635dfe10e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80',\n            }}\n          />\n          {badge && <AvatarBadge />}\n        </Avatar>\n      </AvatarGroup>\n    </HStack>\n  "
  },
  "AvatarSizeExampleAvatar-xs": {
    "completion": "AvatarSizeExampleAvatar-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\" h=\"100%\" justifyContent=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Avatar size={size} key={index}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          <AvatarBadge />\n        </Avatar>\n      ))}\n    </VStack>\n  "
  },
  "AvatarSizeExampleAvatar-sm": {
    "completion": "AvatarSizeExampleAvatar-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\" h=\"100%\" justifyContent=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Avatar size={size} key={index}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          <AvatarBadge />\n        </Avatar>\n      ))}\n    </VStack>\n  "
  },
  "AvatarSizeExampleAvatar": {
    "completion": "AvatarSizeExampleAvatar",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\" h=\"100%\" justifyContent=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Avatar size={size} key={index}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          <AvatarBadge />\n        </Avatar>\n      ))}\n    </VStack>\n  "
  },
  "AvatarSizeExampleAvatar-lg": {
    "completion": "AvatarSizeExampleAvatar-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\" h=\"100%\" justifyContent=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Avatar size={size} key={index}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          <AvatarBadge />\n        </Avatar>\n      ))}\n    </VStack>\n  "
  },
  "AvatarSizeExampleAvatar-xl": {
    "completion": "AvatarSizeExampleAvatar-xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\" h=\"100%\" justifyContent=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Avatar size={size} key={index}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          <AvatarBadge />\n        </Avatar>\n      ))}\n    </VStack>\n  "
  },
  "AvatarSizeExampleAvatar-2xl": {
    "completion": "AvatarSizeExampleAvatar-2xl",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\" h=\"100%\" justifyContent=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Avatar size={size} key={index}>\n          <AvatarFallbackText>John Doe</AvatarFallbackText>\n          <AvatarImage\n            source={{\n              uri: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            }}\n          />\n          <AvatarBadge />\n        </Avatar>\n      ))}\n    </VStack>\n  "
  },
  "IconStoryIcon": {
    "completion": "IconStoryIcon",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    // <VStack space=\"lg\">\n    //   <HStack space=\"md\">\n    //     <Icon as={Cake}  />\n    //     <Icon as={MenuIcon} />\n    //   </HStack>\n\n    //   <HStack space=\"md\">\n    //     <Icon as={Cake} sx={{ h: 40, w: 40, color: 'red' }} />\n    //     <Icon as={MenuIcon} sx={{ h: 40, w: 40, color: 'red' }} />\n    //   </HStack>\n\n    //   <HStack space=\"md\">\n    //     <Icon as={Cake} size=\"xl\" />\n    //     <Icon as={MenuIcon} size=\"xl\" />\n    //   </HStack>\n\n    //   <HStack space=\"md\">\n    //     <Icon as={Cake} color=\"$primary500\" />\n    //   </HStack>\n    <HStack flexWrap=\"wrap\">\n      <Icon as={AddIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowUpIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ArrowDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronsLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronsRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronsUpDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={AtSignIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={PaperclipIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={BellIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CalendarDaysIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MessageCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CheckIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronDownIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronUpIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronLeftIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ChevronRightIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CloseIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CopyIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={TrashIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={DownloadIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={GripVerticalIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={EditIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MailIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ExternalLinkIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MenuIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={InfoIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={LinkIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={LockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={RemoveIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={MoonIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SlashIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CheckCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={PhoneIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={HelpCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={RepeatIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={Repeat1Icon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SearchIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SettingsIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={LoaderIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={StarIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={SunIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ClockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={UnlockIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={EyeIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={EyeOffIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={AlertCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CloseCircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ShareIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={CircleIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={FavouriteIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={GlobeIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n      <Icon as={ThreeDotsIcon} m=\"$2\" w=\"$4\" h=\"$4\" />\n    </HStack>\n    // </VStack>\n  "
  },
  "ImageStoryImage": {
    "completion": "ImageStoryImage",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Image\n      size=\"md\"\n      source={{\n        uri: uri,\n      }}\n    />\n  "
  },
  "ImageSizesStoryImage": {
    "completion": "ImageSizesStoryImage",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <VStack space=\"md\" alignItems=\"center\">\n      {['xs', 'sm', 'md', 'lg', 'xl', '2xl'].map((size, index) => (\n        <Image\n          source={{\n            uri: uri,\n          }}\n          size={size}\n          borderRadius={'$full'}\n          fallbackSource={{\n            uri: fallbackSource,\n          }}\n          key={index}\n          \n        />\n      ))}\n    </VStack>\n  "
  },
  "FabStoryFab-top right-sm": {
    "completion": "FabStoryFab-top right-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top right\" size=\"sm\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top right": {
    "completion": "FabStoryFab-top right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top right\" size=\"md\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top right-lg": {
    "completion": "FabStoryFab-top right-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top right\" size=\"lg\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top left-sm": {
    "completion": "FabStoryFab-top left-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top left\" size=\"sm\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top left": {
    "completion": "FabStoryFab-top left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top left\" size=\"md\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top left-lg": {
    "completion": "FabStoryFab-top left-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top left\" size=\"lg\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-sm": {
    "completion": "FabStoryFab-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom right\" size=\"sm\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab": {
    "completion": "FabStoryFab",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom right\" size=\"md\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-lg": {
    "completion": "FabStoryFab-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom right\" size=\"lg\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-bottom left-sm": {
    "completion": "FabStoryFab-bottom left-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom left\" size=\"sm\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-bottom left": {
    "completion": "FabStoryFab-bottom left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom left\" size=\"md\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-bottom left-lg": {
    "completion": "FabStoryFab-bottom left-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom left\" size=\"lg\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top center-sm": {
    "completion": "FabStoryFab-top center-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top center\" size=\"sm\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top center": {
    "completion": "FabStoryFab-top center",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top center\" size=\"md\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-top center-lg": {
    "completion": "FabStoryFab-top center-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"top center\" size=\"lg\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-bottom center-sm": {
    "completion": "FabStoryFab-bottom center-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom center\" size=\"sm\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-bottom center": {
    "completion": "FabStoryFab-bottom center",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom center\" size=\"md\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "FabStoryFab-bottom center-lg": {
    "completion": "FabStoryFab-bottom center-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Box\n      position=\"relative\"\n      bg=\"$trueGray200\"\n      h=\"$full\"\n      w=\"$full\"\n      sx={{ _web: { w: 300, h: 300 } }}\n    >\n      <Fab placement={placement} placement=\"bottom center\" size=\"lg\">\n        {showIcon && <FabIcon as={MenuIcon} mr=\"$1\" />}\n        {showLabel && <FabLabel>Menu</FabLabel>}\n      </Fab>\n    </Box>\n  "
  },
  "AlertDialogStoryAlertDialog-xs": {
    "completion": "AlertDialogStoryAlertDialog-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"xs\" showAlertDialog=\"true\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-xs-false": {
    "completion": "AlertDialogStoryAlertDialog-xs-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"xs\" showAlertDialog=\"false\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-sm": {
    "completion": "AlertDialogStoryAlertDialog-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"sm\" showAlertDialog=\"true\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-sm-false": {
    "completion": "AlertDialogStoryAlertDialog-sm-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"sm\" showAlertDialog=\"false\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog": {
    "completion": "AlertDialogStoryAlertDialog",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"md\" showAlertDialog=\"true\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-false": {
    "completion": "AlertDialogStoryAlertDialog-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"md\" showAlertDialog=\"false\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-lg": {
    "completion": "AlertDialogStoryAlertDialog-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"lg\" showAlertDialog=\"true\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-lg-false": {
    "completion": "AlertDialogStoryAlertDialog-lg-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"lg\" showAlertDialog=\"false\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-full": {
    "completion": "AlertDialogStoryAlertDialog-full",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"full\" showAlertDialog=\"true\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "AlertDialogStoryAlertDialog-full-false": {
    "completion": "AlertDialogStoryAlertDialog-full-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <AlertDialog\n      isOpen={showAlertDialog || showAlertDialogProp}\n      onClose={handleClose}\n      size=\"full\" showAlertDialog=\"false\"\n    >\n      <AlertDialogBackdrop />\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <Heading>Return Policy</Heading>\n          <AlertDialogCloseButton>\n            <Icon as={CloseIcon} />\n          </AlertDialogCloseButton>\n        </AlertDialogHeader>\n        <AlertDialogBody>\n          <Text>\n            Whoa, slow down there! This modal is like a red light at an\n            intersection, reminding you to stop and think before you proceed. Is\n            deleting this folder the right choice?\n          </Text>\n        </AlertDialogBody>\n        <AlertDialogFooter>\n          <Button\n            variant=\"outline\"\n            action=\"secondary\"\n            onPress={handleClose}\n            mr=\"$3\"\n          >\n            <ButtonText>Cancel</ButtonText>\n          </Button>\n          <Button action=\"negative\" onPress={handleClose}>\n            <ButtonText>Delete</ButtonText>\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  "
  },
  "MenuStoryMenu": {
    "completion": "MenuStoryMenu",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-false": {
    "completion": "MenuStoryMenu-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-bottom end": {
    "completion": "MenuStoryMenu-bottom end",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-bottom end-false": {
    "completion": "MenuStoryMenu-bottom end-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-bottom start": {
    "completion": "MenuStoryMenu-bottom start",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-bottom start-false": {
    "completion": "MenuStoryMenu-bottom start-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-top": {
    "completion": "MenuStoryMenu-top",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-top-false": {
    "completion": "MenuStoryMenu-top-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-top end": {
    "completion": "MenuStoryMenu-top end",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-top end-false": {
    "completion": "MenuStoryMenu-top end-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-top start": {
    "completion": "MenuStoryMenu-top start",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-top start-false": {
    "completion": "MenuStoryMenu-top start-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-left": {
    "completion": "MenuStoryMenu-left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-left-false": {
    "completion": "MenuStoryMenu-left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-left end": {
    "completion": "MenuStoryMenu-left end",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-left end-false": {
    "completion": "MenuStoryMenu-left end-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-left start": {
    "completion": "MenuStoryMenu-left start",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-left start-false": {
    "completion": "MenuStoryMenu-left start-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-right": {
    "completion": "MenuStoryMenu-right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-right-false": {
    "completion": "MenuStoryMenu-right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-right end": {
    "completion": "MenuStoryMenu-right end",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-right end-false": {
    "completion": "MenuStoryMenu-right end-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-right start": {
    "completion": "MenuStoryMenu-right start",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "MenuStoryMenu-right start-false": {
    "completion": "MenuStoryMenu-right start-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center>\n      <Menu\n        isOpen={true}\n        placement={placement}\n        disabledKeys={['Settings']}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={({ ...triggerProps }) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Menu</ButtonText>\n            </Button>\n          "
  },
  "ModalStoryModal-xs": {
    "completion": "ModalStoryModal-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Modal\n      isOpen={showModal || showModalProp}\n      onClose={() => {\n        setShowModal(false"
  },
  "ModalStoryModal-sm": {
    "completion": "ModalStoryModal-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Modal\n      isOpen={showModal || showModalProp}\n      onClose={() => {\n        setShowModal(false"
  },
  "ModalStoryModal": {
    "completion": "ModalStoryModal",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Modal\n      isOpen={showModal || showModalProp}\n      onClose={() => {\n        setShowModal(false"
  },
  "ModalStoryModal-lg": {
    "completion": "ModalStoryModal-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Modal\n      isOpen={showModal || showModalProp}\n      onClose={() => {\n        setShowModal(false"
  },
  "ModalStoryModal-full": {
    "completion": "ModalStoryModal-full",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Modal\n      isOpen={showModal || showModalProp}\n      onClose={() => {\n        setShowModal(false"
  },
  "MultipleModalStoryModal-xs": {
    "completion": "MultipleModalStoryModal-xs",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <>\n      <Center>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Button</ButtonText>\n        </Button>\n      </Center>\n\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false"
  },
  "MultipleModalStoryModal-sm": {
    "completion": "MultipleModalStoryModal-sm",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <>\n      <Center>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Button</ButtonText>\n        </Button>\n      </Center>\n\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false"
  },
  "MultipleModalStoryModal": {
    "completion": "MultipleModalStoryModal",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <>\n      <Center>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Button</ButtonText>\n        </Button>\n      </Center>\n\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false"
  },
  "MultipleModalStoryModal-lg": {
    "completion": "MultipleModalStoryModal-lg",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <>\n      <Center>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Button</ButtonText>\n        </Button>\n      </Center>\n\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false"
  },
  "MultipleModalStoryModal-full": {
    "completion": "MultipleModalStoryModal-full",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <>\n      <Center>\n        <Button onPress={() => setShowModal(true)}>\n          <ButtonText>Button</ButtonText>\n        </Button>\n      </Center>\n\n      <Modal\n        isOpen={showModal}\n        onClose={() => {\n          setShowModal(false"
  },
  "PopoverStoryPopover": {
    "completion": "PopoverStoryPopover",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-false": {
    "completion": "PopoverStoryPopover-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-bottom left": {
    "completion": "PopoverStoryPopover-bottom left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-bottom left-false": {
    "completion": "PopoverStoryPopover-bottom left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-bottom right": {
    "completion": "PopoverStoryPopover-bottom right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-bottom right-false": {
    "completion": "PopoverStoryPopover-bottom right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-top": {
    "completion": "PopoverStoryPopover-top",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-top-false": {
    "completion": "PopoverStoryPopover-top-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-top left": {
    "completion": "PopoverStoryPopover-top left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-top left-false": {
    "completion": "PopoverStoryPopover-top left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-top right": {
    "completion": "PopoverStoryPopover-top right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-top right-false": {
    "completion": "PopoverStoryPopover-top right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-left": {
    "completion": "PopoverStoryPopover-left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-left-false": {
    "completion": "PopoverStoryPopover-left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-left bottom": {
    "completion": "PopoverStoryPopover-left bottom",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-left bottom-false": {
    "completion": "PopoverStoryPopover-left bottom-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-left right": {
    "completion": "PopoverStoryPopover-left right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-left right-false": {
    "completion": "PopoverStoryPopover-left right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-right": {
    "completion": "PopoverStoryPopover-right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-right-false": {
    "completion": "PopoverStoryPopover-right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-right bottom": {
    "completion": "PopoverStoryPopover-right bottom",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-right bottom-false": {
    "completion": "PopoverStoryPopover-right bottom-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-right top": {
    "completion": "PopoverStoryPopover-right top",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "PopoverStoryPopover-right top-false": {
    "completion": "PopoverStoryPopover-right top-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Center w={1200} h={800}>\n      <Popover\n        offset={10}\n        isOpen={showPopoverProp}\n        placement={placement}\n        // eslint-disable-next-line react/no-unstable-nested-components\n        trigger={(triggerProps) => {\n          return (\n            <Button {...triggerProps}>\n              <ButtonText>Popover</ButtonText>\n            </Button>\n          "
  },
  "TooltipStoryTooltip": {
    "completion": "TooltipStoryTooltip",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-false": {
    "completion": "TooltipStoryTooltip-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-bottom left": {
    "completion": "TooltipStoryTooltip-bottom left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-bottom left-false": {
    "completion": "TooltipStoryTooltip-bottom left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-bottom right": {
    "completion": "TooltipStoryTooltip-bottom right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-bottom right-false": {
    "completion": "TooltipStoryTooltip-bottom right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-top": {
    "completion": "TooltipStoryTooltip-top",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-top-false": {
    "completion": "TooltipStoryTooltip-top-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-top left": {
    "completion": "TooltipStoryTooltip-top left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-top left-false": {
    "completion": "TooltipStoryTooltip-top left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-top right": {
    "completion": "TooltipStoryTooltip-top right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-top right-false": {
    "completion": "TooltipStoryTooltip-top right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-left": {
    "completion": "TooltipStoryTooltip-left",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-left-false": {
    "completion": "TooltipStoryTooltip-left-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-left top": {
    "completion": "TooltipStoryTooltip-left top",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-left top-false": {
    "completion": "TooltipStoryTooltip-left top-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-left bottom": {
    "completion": "TooltipStoryTooltip-left bottom",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-left bottom-false": {
    "completion": "TooltipStoryTooltip-left bottom-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-right": {
    "completion": "TooltipStoryTooltip-right",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-right-false": {
    "completion": "TooltipStoryTooltip-right-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-right top": {
    "completion": "TooltipStoryTooltip-right top",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-right top-false": {
    "completion": "TooltipStoryTooltip-right top-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-right bottom": {
    "completion": "TooltipStoryTooltip-right bottom",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  },
  "TooltipStoryTooltip-right bottom-false": {
    "completion": "TooltipStoryTooltip-right bottom-false",
    "imports": [
      "NewComponent"
    ],
    "template": "\n    <Tooltip\n      offset={10}\n      placement={placement}\n      isOpen={showTooltipProp}\n      // eslint-disable-next-line react/no-unstable-nested-components\n      trigger={(triggerProps: any) => {\n        return (\n          <Button {...triggerProps}>\n            <ButtonText>More</ButtonText>\n          </Button>\n        "
  }
}